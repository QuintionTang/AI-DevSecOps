{"docstore/metadata": {"c17e4be3-1360-4e92-b293-65124fa4f09d": {"doc_hash": "c6e63552375f4208ae651154f7c803f9f3feea41959ce22e6aea9f34fd45fb58"}, "723ffeaf-eff4-45a5-a2ff-1f607ab3992c": {"doc_hash": "eacef33a3a6c640251be85cf44937d9643b04f2f8122c9d680dcc2d833185850"}, "7e55f068-d021-4963-9872-7f6b226bb685": {"doc_hash": "1763d3390694e453edcf75e5cd86b9c5b7524b22d9b13937e16a604d3a359f96"}, "e955a181-55ed-4794-aab7-ee281c66428d": {"doc_hash": "075b1a452f51bb134969aaf8513eb5e60495ef3d3ac25f783adfbfa802185a74"}, "3b60f01c-6f1e-46b9-ba57-24a9d392f792": {"doc_hash": "e7dcbaa6bc68eed49cfa9aa882d44205fbdd2003dd264a985d9d67c742db8f17"}, "32bfff5c-038a-4b55-bc86-16835946ac25": {"doc_hash": "96fe44ba5f28ddfc1bbd4bfd444d996183e5b5448c05aa5fceac7c639a6d65d0"}, "1b9dbaf8-24b1-4ccd-9ee5-12c82a66f445": {"doc_hash": "ae95b776e8c1d9e03d81506f322b91a4d2981ec734975ecccadf9cb0472b7e09"}, "8c04d781-c147-4457-9563-5c071ef6899a": {"doc_hash": "5bac8489937ff1a21f4b3ce7989aafa1037debe783727b15bc3c09a39e0c0381"}, "47221a62-30f3-4258-ba96-1c5f4f173672": {"doc_hash": "f15834cedcee8089268ff8e4fcf706612ec8d67f546ce3bec501c5c1cb5029bd"}, "59732c75-9ba5-482e-857e-677e947ff4c1": {"doc_hash": "0234bd02e6ef4f59da2913df7c83bb01fa4d2e7403a4f66f810537eb3e43bc5d"}, "d7f68784-2080-4fe7-832f-5eaee67133e8": {"doc_hash": "3a6c2c968e48a809cb35a6c7843e15f97d43bde36cffc68e9efcbf7b4f8a29f3"}, "330dab2c-902c-4802-9638-af91470da567": {"doc_hash": "a7e5acfb9f0b8a5338b17747a15f617c588e61031eae2d3c4396b7a9f3db7f46"}, "b46c794a-060b-4b4e-8202-b26b3c2e447a": {"doc_hash": "fa32fef248841f2e75937deb18d20b932d431c5720ba3816e885cf407c2b9c1f"}, "debbc6dd-b21e-4cb2-8092-389223fb701b": {"doc_hash": "f3264f1a53d502ebbdb1facdc0357990910e6292fc3340687e2802ce5fe7a3ca"}, "a1f8f6e3-ef7b-4407-984b-71787bb10b11": {"doc_hash": "4a3db0ec58dfc4e6e16db329b29448d29b4fc2fe0e0dee58c7a7bd0e82631992"}, "08c325b0-7cfa-4dbf-aba7-85ef0f567019": {"doc_hash": "357a6def7d7f3efe30b019f6eb6e3bb6c93846a9f6cb29056976b7947728f4f9"}, "29c9267d-b2c0-44dc-9404-6536736fa121": {"doc_hash": "c3445812738de81f3b0e03ce33a575ee4a50d01af13b5b7fd59bb31c59d7ed7c"}, "4b1fd3e2-ec27-4967-8392-fb1f955e6e11": {"doc_hash": "e5ef46440d571fa2867ae3004ce2cb8e14dbbb38c726c57c8564c58a2fcfc9d8"}, "510fb893-4caa-45d0-b4a5-4495682f0d39": {"doc_hash": "d018a0193b875f8915760e9ec98cbf721ec399a2bb8cc7642eea92c949a79cdc"}, "7991226c-7519-4d6a-8ce3-ce0cd3ad090b": {"doc_hash": "62265170f253a42b0cdabd93b96c78bc370c158af9332ddd021bed2980912b86"}, "b7858407-a63f-47c4-9ab3-27dc8802118e": {"doc_hash": "34842fe8482fd05465fe43091fa52b3d9d78848cf235b047a00216f9b99e4a1d"}, "e4aee8b8-de31-4b79-b57d-117be1914bf0": {"doc_hash": "f4a1f7f7301b7a3e01340dc4a4e31598dda19831112e004ba57ed59779893227"}, "2379446f-19f8-4306-8aa3-4a6cddb02160": {"doc_hash": "d37c512b945771cfe3223655eb2c3e4ae2794b3660a544e9fc1225d888c9714c"}, "43389b16-9ba4-4453-8ef9-72072927c16e": {"doc_hash": "cdfab2301e21c4dff7ed0a6ef7237dd5eb067a9a841ff6c9bbe0956e3976ecab"}, "9c1197b1-a7c0-4a0c-afe5-bdeaf6a3ff7e": {"doc_hash": "c6e63552375f4208ae651154f7c803f9f3feea41959ce22e6aea9f34fd45fb58"}, "5c2ff883-c73d-4f07-8364-6605978404ef": {"doc_hash": "eacef33a3a6c640251be85cf44937d9643b04f2f8122c9d680dcc2d833185850"}, "c6067101-4cf7-455e-8e7e-8070ebe733f7": {"doc_hash": "616fe513df608898a568115d0ff8ff8f8e57481e30f47c60f8006503b1ff8a99"}, "afd807ae-617c-456c-a0ca-338200188fd5": {"doc_hash": "fa15af001d4979c6a281601d4d93a4d3f3a0567be571a3fa668f87087769ca1c"}, "05e7d6b0-43fa-49f4-942e-c7cbc63abff4": {"doc_hash": "075b1a452f51bb134969aaf8513eb5e60495ef3d3ac25f783adfbfa802185a74"}, "a6ada820-776f-47c9-bade-f77bfe2eba67": {"doc_hash": "e7dcbaa6bc68eed49cfa9aa882d44205fbdd2003dd264a985d9d67c742db8f17"}, "8e3a8c99-a1ff-4d25-949d-74014cf18453": {"doc_hash": "96fe44ba5f28ddfc1bbd4bfd444d996183e5b5448c05aa5fceac7c639a6d65d0"}, "63cd16f9-8a73-4e54-b897-de06b2918843": {"doc_hash": "0ca1aca7b584c93c0464903192816d2e4dc9c601669b8882bf2d5fda8738ae4e"}, "4dfb3105-9d7a-4576-988d-d0804a37e282": {"doc_hash": "43a80f3aa8aafba722738b06aba07cae3923ea18be12c051fe2c0af9cf699717"}, "8a0ed2b8-fbe4-45ca-b228-f03bfb1c0f17": {"doc_hash": "ebe20c7536595abfb419dcac9ae39633eaa2e73799558f30f55bd7ebf528f0ef"}, "539a6040-8811-4fa1-8fcd-7d3fb8492963": {"doc_hash": "9b9290e1b5ed1dfdcafed3470a90e0ba94e032da626c3bf5fcd5130b506a2d75"}, "02558b94-474f-426b-8aee-9dfa957a243c": {"doc_hash": "c52852535a9ca030221532d5a863f010bc0394be6d28c4258ebe485a925266ad"}, "aa6d7258-2af9-4bf1-957e-d7ae23635333": {"doc_hash": "03254976942b085067b859efa48ae68c6d554057e8891a9d2bcb79c9e4313b01"}, "7d9f263f-a703-4405-8335-23ea4edf2b9c": {"doc_hash": "0de15fdb1f1a5a58f4754cc950f5495f4b6cae2e6275ccfeb849088af338ba08"}, "e25965f2-9a9c-4281-a235-25bc6711d891": {"doc_hash": "0234bd02e6ef4f59da2913df7c83bb01fa4d2e7403a4f66f810537eb3e43bc5d"}, "db1f39fd-17ca-459f-a53c-b3861ffc606d": {"doc_hash": "5d17fa0bf274a7ebbb6f93dc2ff17f285b8881f444d8064b6b5b166c7bd35da0"}, "cc997008-4ae6-4c89-865f-d88130df13e3": {"doc_hash": "5132fdaff5a8507971569b4f25d9219288adaafaf783c63b39db0115dec7f79e"}, "8114c579-4c32-4a72-b6c8-3b293b31f624": {"doc_hash": "9fc897cfbd149a78078cb56566eefc3824c8083cda4399ac6bddaa71343f6c7a"}, "a902ef27-115b-4a69-8f43-5cb67dd9ae4e": {"doc_hash": "175656ef8a845dc5503bcfbcdc0a81da2c7ed1822139fb3a99e8e08439552a29"}, "965cf331-a6a5-486e-bfea-7fe98c58f88d": {"doc_hash": "cfdf48dea9c3fcd9233f47ed44811a8058aee52ed9cd754d1a41c2961ad67349"}, "acbe384c-1f48-41ae-94ef-0e01a47ecf1c": {"doc_hash": "51438dc387c96ed553ae3ad161eab7eecd3a52d82d60c308b63004333b5a0dc8"}, "6ac6d2e7-0ba8-4ce8-860f-cfb6ee63d54d": {"doc_hash": "0e31191b20823d95b7047ad06b3eef0ea8a73e515c6dce8d2a1262a539f6bf16"}, "5f876ebf-930e-47c1-abb3-82aa31e2cc47": {"doc_hash": "f022305904e82a5d31972b9210777129552af23552cde8d72c2221b608090638"}, "b8f9ec84-72e1-4482-9cb2-e25ae303ed3d": {"doc_hash": "7b926ab28bbfac24f797bb46f1a8f0a9d1cf34f440bf548c95564e11af6e3ce0"}, "e2947b4a-a161-4dc8-af36-00163b22f9ba": {"doc_hash": "4a3db0ec58dfc4e6e16db329b29448d29b4fc2fe0e0dee58c7a7bd0e82631992"}, "70a3470c-ac1c-4047-b88d-5c8d01ca10af": {"doc_hash": "32b85c7c74f6a819126bf96a8321aa7b82dabbde096ec06e45aa4331f4a30540"}, "4c29d398-59a0-4a5f-aaa7-9e34e38eaccb": {"doc_hash": "2f00a3fb7f6c2951865568e97a327e84e9686591fe5156efdf2692af5fad4d5f"}, "fec868ed-828c-44ab-911a-bea286722711": {"doc_hash": "df4f16ffb31123e04cff51705af7b6c84cc6b77b94df2a9a1c67c3267da6bb52"}, "1be44838-93df-4184-844d-6c6b3670140a": {"doc_hash": "65cdb08025323f20538d56f6421eb81c51ffc45c28b1d673291862aa879671d4"}, "3af1ab71-816a-47d3-b2b8-98d46d1c6d49": {"doc_hash": "e5ef46440d571fa2867ae3004ce2cb8e14dbbb38c726c57c8564c58a2fcfc9d8"}, "41aee16f-f379-4c6d-971a-7413cc233535": {"doc_hash": "d018a0193b875f8915760e9ec98cbf721ec399a2bb8cc7642eea92c949a79cdc"}, "acd70df1-e0da-49c5-8fab-e8b8825886f9": {"doc_hash": "ccba786e87ca4de68003ee36868ace742fed3d04b80decda8f27b080b2e7e7ec"}, "5c75de89-2835-43b9-a907-7cd2242a33cd": {"doc_hash": "ef6763cc115fa1833d57f6b39805978e89b0eef0dda3a89a50472d10a8b5f47e"}, "c06cabfb-7db7-4e92-a5c8-727687a4fc4c": {"doc_hash": "a4eea3da28545e827eb7b643986e4e10b86206453b11f17890b43d95343f6f55"}, "66923431-e101-4f89-8657-b40c4a86cd42": {"doc_hash": "0cb1589e08cd1b7a27e02887b5267f4bdc095130db19cc66ca890970c7e8a8a0"}, "73c7c230-0aea-4b55-8fe0-2accf630df4b": {"doc_hash": "f4a1f7f7301b7a3e01340dc4a4e31598dda19831112e004ba57ed59779893227"}, "a3cd4ede-cd25-434d-bfaa-820eb3dde242": {"doc_hash": "674a61fd94290908c57c2cb992543f77035944963c25478e9da756940a1c42be"}, "a661cf14-0c5e-4e1d-aea0-d7423117b64f": {"doc_hash": "007765707bfc4c9859170fd90799e6f4d453d97963b38f3ddc49898348d91b25"}, "c19d18c2-3c7a-475f-8f20-deda427acb95": {"doc_hash": "cdfab2301e21c4dff7ed0a6ef7237dd5eb067a9a841ff6c9bbe0956e3976ecab"}}, "docstore/data": {"9c1197b1-a7c0-4a0c-afe5-bdeaf6a3ff7e": {"__data__": {"text": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a  \u4f7f\u2f64 Python\u3001Streamlit \u548c Hugging Face \u6a21\u578b\uff0c\u6784\u5efa\u2f46\u9700 API \u4ee4\u724c\u7684AI\u6545\u4e8b\u673a\uff0c\u5e94\u2f64\u6839\u636e\u4e0a\u4f20\u7684\u56fe\u2f5a\u521b\u5efa\u2fb3\u9891\u6545\u4e8b\u3002\u2f42\u7ae0\u6d89\u53ca\u7684\u5e94\u2f64\u4e3b\u8981\u9488\u5bf9\u82f1\u2f42\uff0c\u53ef\u4ee5\u501f\u52a9\u5e94\u2f64\u5b66\u4e60AI\u5982\u4f55\u770b\u56fe\u5199\u8bdd\u3002\u5f53\u4e0b\u2f63\u6d3b\u4e2d\u88ab\u2f08\u2f2f\u667a\u80fd\u6a21\u578b\u548c\u2f2f\u5177\u6240\u5305\u56f4\uff0c\u5bf9\u4e8e\u8ddf\u968f\u2f08\u2f2f\u667a\u80fd\u53d1\u5c55\u7684\u2f08\u6765\u8bf4\uff0c\u5df2\u7ecf\u8d85\u8d1f\u8377\u4e86\uff0c\u2f0f\u4e4e\u6bcf\u5929\u90fd\u6709\u5404\u79cd\u65b0\u9c9c\u7684AI\u5e94\u2f64\u6216\u8005\u6280\u672f\u7684\u51fa\u73b0\u3002\u4f46\u7a0d\u6709\u4e0d\u614e\u5c31\u89c9\u5f97\u843d\u540e\u4e86\uff0c\u2f24\u516c\u53f8\u548c\u2f2f\u5177\u9690\u85cf\u5728\u2fca\u76d2\u2f26\u540e\u2faf\uff0c\u6ca1\u6709\u9014\u5f84\u53bb\u4e86\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u3002\u5728\u672c\u2f42\u4e2d\uff0c\u5c31\u6765\u2f00\u8d77\u4f7f\u2f64\u5f00\u6e90\u548c\u514d\u8d39\u2f2f\u5177\u63a2\u7d22\u2f08\u2f2f\u667a\u80fd\u7684\u591a\u6a21\u6001\u2f45\u6cd5\uff0c\u7834\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u5206\u89e3\u6210\u7b80\u5355\u7684\u6b65\u9aa4\uff0c\u7136\u540e\u901a\u8fc7\u2f83\u5b66\u5f04\u6e05\u695a\u5982\u4f55\u53bb\u505a\u3002\u672c\u2f42\u5c06\u521b\u5efa\u2f00\u4e2a Python-Streamlit \u5e94\u2f64\u7a0b\u5e8f\uff0c\u5c06\u56fe\u2f5a\u4f5c\u4e3a\u8f93\u2f0a\uff0c\u901a\u8fc7 Hugging Face \u6a21\u578b\u8bc6\u522b\u7167\u2f5a\u7684\u63cf\u8ff0\u2f42\u672c\uff0c\u6839\u636e\u5b83\u2f63\u6210\u2f00\u4e2a\u77ed\u6545\u4e8b\uff0c\u4e4b\u540e\u5c06\u6839\u636e\u8be5\u77ed\u7bc7\u6545\u4e8b\u2f63\u6210\u2fb3\u9891\u3002\n", "doc_id": "9c1197b1-a7c0-4a0c-afe5-bdeaf6a3ff7e", "embedding": null, "doc_hash": "c6e63552375f4208ae651154f7c803f9f3feea41959ce22e6aea9f34fd45fb58", "extra_info": {"page_label": "1", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 443}, "relationships": {"1": "c17e4be3-1360-4e92-b293-65124fa4f09d"}}, "__type__": "1"}, "5c2ff883-c73d-4f07-8364-6605978404ef": {"__data__": {"text": "GitHub\uff1ahttps://github.com/QuintionTang/AI-Sto!\u7b2c\u4e00\u6b65\uff1a\u521b\u5efa\u865a\u62df\u73af\u5883\u7b2c\u4e00\u6b65\uff1a\u521b\u5efa\u865a\u62df\u73af\u5883  \u8fd9\u662f\u5f53\u524dAI\u5e94\u2f64\u9ed8\u8ba4\u7684\u6d41\u7a0b\u4e86\uff0c\u4ece\u521b\u5efa\u2f00\u4e2a\u865a\u62df\u73af\u5883\u6765\u5f00\u59cb\u2f00\u4e2a\u65b0\u9879\u2f6c\u3002\u2fb8\u5148\u521b\u5efa\u2f00\u4e2a\u5168\u65b0\u7684\u2f6c\u5f55 AI-Story \u5e76\u8fd0\u2f8f venv \u6307\u4ee4\u521b\u5efa\u865a\u62df\u8fd0\u2f8f\u73af\u5883\uff1a\u6fc0\u6d3b\u865a\u62df\u73af\u5883\uff1amkdir AI-Storycd AI-Storypython3 -m venv venv123", "doc_id": "5c2ff883-c73d-4f07-8364-6605978404ef", "embedding": null, "doc_hash": "eacef33a3a6c640251be85cf44937d9643b04f2f8122c9d680dcc2d833185850", "extra_info": {"page_label": "2", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 197}, "relationships": {"1": "723ffeaf-eff4-45a5-a2ff-1f607ab3992c"}}, "__type__": "1"}, "c6067101-4cf7-455e-8e7e-8070ebe733f7": {"__data__": {"text": "\u7b2c\u4e8c\u6b65\uff1a\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u5e76\u83b7\u53d6 Hugging Face API Token\u7b2c\u4e8c\u6b65\uff1a\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u5e76\u83b7\u53d6 Hugging Face API Token  \u6fc0\u6d3b venv \u540e\uff0c\u8fd0\u2f8f\u4ee5\u4e0b pip \u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305\uff1a\n\u4ece\u4e0a\u2faf\u53ef\u4ee5\u770b\u5230\uff0c\u6ca1\u6709\u5b89\u88c5 pytorch \u6216 tensor\ufb02ow\uff1a\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u2fa5\u5c06\u5728\u514d\u8d39\u7684 Hugging Face \u6a21\u578b\u4e0a\u4f7f\u2f64 API \u8fdb\u2f8f\u63a8\u7406\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u5728Hugging Face \u4e0a\u6ce8\u518c\u5e76\u521b\u5efa API \u4ee4\u724c\uff08\u5411LLMs\u53d1\u51fa API \u8bf7\u6c42\u7684\u4e2a\u2f08\u6388\u6743\u5bc6\u94a5\uff09\u3002\u5728 Hugging Face \u5b98\u2f45\u2f79\u7ad9\u4e0a\u6ce8\u518c\u8d26\u53f7\u5e76\u83b7\u53d6 API \u4ee4\u724c\uff0c\u8fd9\u2fa5\u662f\u8bf4\u660e\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5728 Hugging Face \u4e0a\u521b\u5efa\u2f00\u4e2a\u5e10\u6237\uff08\u5982\u679c\u8fd8\u6ca1\u6709\uff09\uff0c\u7136\u540e\u521b\u5efa API \u4ee4\u724c\u3002\u8bb0\u4f4f\uff01 \u5982\u679c\u5728\u5411 API \u53d1\u9001\u8bf7\u6c42\u65f6\u672a\u63d0\u4ea4 API \u4ee4\u724c\uff0c\u5c06\u2f46\u6cd5\u5728\u79c1\u6709\u6a21\u578b\u4e0a\u8fd0\u2f8f\u63a8\u7406\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5148\u6765\u521b\u5efa\u2f00\u4e2a con\ufb01g.py \u2f42\u4ef6\u6765\u5b58\u50a8\u914d\u7f6e\u53d8\u91cf\uff0ccon\ufb01g.py \u53d8\u91cf\u7684\u53c2\u6570\u6765\u2f83\u4e8e\u2f42\u4ef6 .env \u3002con\ufb01g.py \u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n.env \u7684\u914d\u7f6e\u683c\u5f0f\u5982\u4e0b\uff1a\u5728\u4e3b\u2f6c\u5f55\u4e2d\u521b\u5efa\u2f00\u4e2a\u65b0\u7684 python \u2f42\u4ef6 app.py\uff0c\u5148\u6765\u9a8c\u8bc1\u4f9d\u8d56\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\n\u4fdd\u5b58\u5e76\u5728\u6fc0\u6d3b venv \u7684\u60c5\u51b5\u4e0b\u4ece\u7ec8\u7aef\u7a97\u2f1d\u8fd0\u2f8f\uff1a\u5982\u679c\u4ec0\u4e48\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u548c\u9519\u8bef\u5c31\u610f\u5473\u7740\u2f00\u5207\u5b89\u88c5\u90fd\u6210\u529f\u4e86\u3002\u6ce8\u610f\uff1a\u5bfc\u2f0a Langchain\uff0c\u56e0\u4e3a Hugging Face \u5c1a\u4e0d\u2f40\u6301\u2f42\u672c\u2f63\u6210\u63a8\u7406\u7ba1\u9053\uff0c\u9700\u8981 Langchain \u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u7b2c\u4e09\u6b65\uff1a\u521b\u5efa\u7531\u56fe\u7247\u751f\u6210\u6587\u5b57\u7684 AI \u51fd\u6570\u7b2c\u4e09\u6b65\uff1a\u521b\u5efa\u7531\u56fe\u7247\u751f\u6210\u6587\u5b57\u7684 AI \u51fd\u6570  \u5728 app.py", "doc_id": "c6067101-4cf7-455e-8e7e-8070ebe733f7", "embedding": null, "doc_hash": "616fe513df608898a568115d0ff8ff8f8e57481e30f47c60f8006503b1ff8a99", "extra_info": {"page_label": "3", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 664}, "relationships": {"1": "7e55f068-d021-4963-9872-7f6b226bb685", "3": "afd807ae-617c-456c-a0ca-338200188fd5"}}, "__type__": "1"}, "afd807ae-617c-456c-a0ca-338200188fd5": {"__data__": {"text": "Langchain\uff0c\u56e0\u4e3a Hugging Face \u5c1a\u4e0d\u2f40\u6301\u2f42\u672c\u2f63\u6210\u63a8\u7406\u7ba1\u9053\uff0c\u9700\u8981 Langchain \u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u7b2c\u4e09\u6b65\uff1a\u521b\u5efa\u7531\u56fe\u7247\u751f\u6210\u6587\u5b57\u7684 AI \u51fd\u6570\u7b2c\u4e09\u6b65\uff1a\u521b\u5efa\u7531\u56fe\u7247\u751f\u6210\u6587\u5b57\u7684 AI \u51fd\u6570  \u5728 app.py \u4e2d\uff0c\u53ef\u4ee5\u5f00\u59cb\u521b\u5efa\u2f00\u4e9b\u51fd\u6570\u3002\u5c06\u4e3a\u6bcf\u9879\u4efb\u52a1\u521b\u5efa\u2f00\u4e2a\u51fd\u6570\uff1a\u2f00\u4e2a\u2f64\u4e8e\u56fe\u50cf\u5230\u2f42\u672c\u3001\u2f00\u4e2a\u2f64\u4e8e\u2f42\u672c\u2f63\u6210\u6545\u4e8b\u3001\u6700\u540e\u2f00\u4e2a\u2f64\u4e8e\u6545\u4e8b\u2f42\u672c\u5230\u8bed\u2fb3\u3002\u4ee3\u7801\u5982\u4e0b\uff1asource venv/bin/activate  #for macvenv\\Scripts\\activate     #for windows users12\npip install --upgrade pippip install transformers     # \u2f64\u4e8e\u4e0eLLM\u7684\u4e92\u52a8pip install huggingface_hub  # hugging face librarypip install langchain pip install streamlit==1.24.0pip install python-dotenv123456\nfrom dotenv import load_dotenvimport osload_dotenv()HUGGING_FACE_API_TOKEN=os.environ.get('HUGGING_FACE_API_TOKEN')123456HUGGING_FACE_API_TOKEN=\" \"1# AI \u63a8\u7406\u5e93from huggingface_hub import InferenceClientfrom langchain import HuggingFaceHubimport requests# \u914d\u7f6e\u2f42\u4ef6from con\ufb01g import (HUGGING_FACE_API_TOKEN)import osimport datetime12345678910python3 app.py1", "doc_id": "afd807ae-617c-456c-a0ca-338200188fd5", "embedding": null, "doc_hash": "fa15af001d4979c6a281601d4d93a4d3f3a0567be571a3fa668f87087769ca1c", "extra_info": {"page_label": "3", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 554, "end": 1359}, "relationships": {"1": "7e55f068-d021-4963-9872-7f6b226bb685", "2": "c6067101-4cf7-455e-8e7e-8070ebe733f7"}}, "__type__": "1"}, "05e7d6b0-43fa-49f4-942e-c7cbc63abff4": {"__data__": {"text": "\u4f7f\u2f64\u53d8\u91cf hfApiToken \u6765\u5b58\u50a8 Hugging Face \u4ee4\u724c\uff0c\u53d8\u91cf model_Image2Text \u4efb\u52a1\u76f8\u5173\u7684\u6a21\u578b\u3002\u56fe\u50cf\u5230\u2f42\u672c\u4efb\u52a1\u4f4d\u4e8e Hugging Face Multimodal \u6a21\u578b\u4e2d\u3002\u5728 Hugging Face \u7684 Models \u2eda\u2faf\u4e0a\uff0c\u5728\u5de6\u4fa7\u7684 Multimodal \u9009\u62e9 Image-to-Text\uff1a\u5728\u6700\u53d7\u6b22\u8fce\u7684\u6a21\u578b\u4e2d\uff0c\u4ee5 blip-base \u6700\u77e5\u540d\u3002\n\u5355\u51fb\u5b83\u65f6\uff0c\u6a21\u578b\u5361\u2eda\u2faf\u5c06\u6253\u5f00\uff0c\u5176\u4e2d\u5305\u542b\u2f24\u91cf\u8bf4\u660e\u548c\u5feb\u901f\u542f\u52a8\u4ee3\u7801\u3002\u4e3a\u4e86\u8fdb\u2f8f\u63a8\u7406\uff0c\u9700\u8981\u9075\u5faa API \u6307\u5357\u7684\u8bf4\u660e\uff0c\u4ec5\u66f4\u6539\u6a21\u578b\u540d\u79f0\uff1a\u53ea\u9700\u5355\u51fb\u590d\u5236\u56fe\u6807\u5373\u53ef\uff0c\u5982\u56fe\u6240\u793a\uff1ahfApiToken = HUGGING_FACE_API_TOKEN # \u4ec5 HuggingFace Hub \u63a8\u8bbamodel_Image2Text = \"Salesforce/blip-image-captioning-base\"123", "doc_id": "05e7d6b0-43fa-49f4-942e-c7cbc63abff4", "embedding": null, "doc_hash": "075b1a452f51bb134969aaf8513eb5e60495ef3d3ac25f783adfbfa802185a74", "extra_info": {"page_label": "4", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 385}, "relationships": {"1": "e955a181-55ed-4794-aab7-ee281c66428d"}}, "__type__": "1"}, "a6ada820-776f-47c9-bade-f77bfe2eba67": {"__data__": {"text": "imageToText \u51fd\u6570\u73b0\u5728\u6709\u4e86\u2f00\u4e2a\u6a21\u578b\uff0c\u53d1\u9001\u5e26\u6709\u4ee5\u4e0b\u4fe1\u606f\u7684\u8bf7\u6c42\uff1a\n\u51fd\u6570 imageToText \u5c06\u63a5\u53d7\u672c\u5730\u56fe\u50cf\u2f42\u4ef6\u5e76\u8fd4\u56de\u63cf\u8ff0\u8be5\u56fe\u50cf\u7684\u2f42\u672c\u3002\u2f42\u4ef6 app.py \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1adef imageToText(url):    from huggingface_hub import InferenceClient    client = InferenceClient(token=hfApiToken)    model_Image2Text = \"Salesforce/blip-image-captioning-base\"    # \u6765\u2f83huggingface.co/tasks    text = client.image_to_text(url,model=model_Image2Text)    print(text)    return text12345678# AI \u63a8\u7406\u5e93from huggingface_hub import InferenceClientfrom langchain import HuggingFaceHubimport requests# \u914d\u7f6e\u2f42\u4ef6from con\ufb01g import (HUGGING_FACE_API_TOKEN)import osimport datetimehfApiToken = HUGGING_FACE_API_TOKEN# \u4ec5 HuggingFace Hub \u63a8\u8bbamodel_Image2Text = \"Salesforce/blip-image-captioning-base\"def imageToText(url):    from huggingface_hub import InferenceClient    client = InferenceClient(token=hfApiToken)    # \u6765\u2f83huggingface.co/tasks    text = client.image_to_text(url,model=model_Image2Text)1234567891011121314151617181920", "doc_id": "a6ada820-776f-47c9-bade-f77bfe2eba67", "embedding": null, "doc_hash": "e7dcbaa6bc68eed49cfa9aa882d44205fbdd2003dd264a985d9d67c742db8f17", "extra_info": {"page_label": "5", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 911}, "relationships": {"1": "3b60f01c-6f1e-46b9-ba57-24a9d392f792"}}, "__type__": "1"}, "8e3a8c99-a1ff-4d25-949d-74014cf18453": {"__data__": {"text": "\u4e0b\u2faf\u5c31\u6765\u8fd0\u2f8f\u2f00\u4e0b\u8fd9\u4e2a\u51fd\u6570:\n\u5728\u6fc0\u6d3b venv \u4e0b\u8fd0\u2f8f\uff1a\u56fe\u2f5a\u63cf\u8ff0\u5982\u4e0b\uff1a\u6839\u636e\u4e0a\u8ff0\u63cf\u8ff0\u2f63\u6210\u7684\u6545\u4e8b\u5982\u4e0b\uff1a    print(text)    return text2122basetext = imageToText(\"./images/a-boy.jpg\")1\npython3 app.py1a boy sitting on top of a pile of books1Once upon a time, there was a boy named Jack who loved to read. He would spend hours buried in a pile of books, lost in the worlds that only books could create.One day, Jack was sitting on top of the pile, lost in a book about dragons and knights. Suddenly, he felt a tug on his book. He looked up to see a small creature trying to get his attention.\"What are you doing?\" Jack asked.The creature looked up at him with big, round eyes. \"I'm trying to get your attention,\" it said. \"I'm a bookworm too. We're both in here, aren't we?\"Jack smiled. \"I suppose we are,\" he said. \"What are you reading?\"The creature looked down at the book in its hand. \"This one,\" it said. \"It's about a brave knight who saves a princess from a dragon.\"Jack nodded. \"I've been reading a lot of those lately,\" he said.12345678910111213", "doc_id": "8e3a8c99-a1ff-4d25-949d-74014cf18453", "embedding": null, "doc_hash": "96fe44ba5f28ddfc1bbd4bfd444d996183e5b5448c05aa5fceac7c639a6d65d0", "extra_info": {"page_label": "6", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 995}, "relationships": {"1": "32bfff5c-038a-4b55-bc86-16835946ac25"}}, "__type__": "1"}, "63cd16f9-8a73-4e54-b897-de06b2918843": {"__data__": {"text": "\u7b2c\u56db\u6b65\uff1a\u4ece\u6587\u672c\u51fd\u6570\u521b\u5efa AI \u751f\u6210\u7684\u6545\u4e8b\u7b2c\u56db\u6b65\uff1a\u4ece\u6587\u672c\u51fd\u6570\u521b\u5efa AI \u751f\u6210\u7684\u6545\u4e8b  imageToText \u51fd\u6570\u68c0\u7d22\u5230\u7684\u7167\u2f5a\u63cf\u8ff0\u5c06\u662f\u6545\u4e8b\u2f63\u6210\u7684\u8d77\u70b9\u3002\u4f7f\u2f64 Hugging Face \u6a21\u578b\u8fdb\u2f8f\u2f42\u672c\u2f63\u6210\u63a8\u7406\u5e76\u4e0d\u662f\u2f00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff01\u2fb8\u5148\uff0c\u8bb8\u591a\u6267\u2f8f\u6a21\u578b\u90fd\u7981\u2f64\u4e86 API\uff1a\u5176\u6b21\uff0c\u2f42\u672c\u2f63\u6210\u63a8\u7406\u6839\u636e\u9009\u62e9\u7684\u6a21\u578b\u9075\u5faa\u4e0d\u540c\u7684\u89c4\u5219\u3002\u6d4b\u8bd5\u4e86\u5176\u4e2d\u768420\u4e2a\uff0c\u6700\u7ec8\u51b3\u5b9a\u9009\u62e9 togethercomputer/RedPajama-INCITE-Chat-3B-v1\uff0c\u8fd9\u662f\u4e3b\u8981\u57fa\u4e8e OpenAssistant LLM \u7684\u6a21\u578b\u4e4b\u2f00\u3002Open Assistant \u662f\u7531 LAION \u548c\u4e16\u754c\u5404\u5730\u6709\u5174\u8da3\u5c06\u8be5\u6280\u672f\u5e26\u7ed9\u6bcf\u4e2a\u2f08\u7684\u4e2a\u2f08\u7ec4\u7ec7\u7684\u2f00\u4e2a\u9879\u2f6c\u3002\u4ed6\u4eec\u7684\u2f1d\u53f7\u662f\uff1a\u6211\u4eec\u76f8\u4fe1\u6211\u4eec\u5373\u5c06\u521b\u9020\u2f00\u573a\u2fb0\u547d\u6b63\u5982 Stable Di\"usion \u6539\u53d8\u4e86\u73b0\u4ee3\u827a\u672f\u7684\u521b\u4f5c\u8fc7\u7a0b, \u6211\u4eec\u5c06\u900f\u8fc7\u5bf9\u8bdd\u5f0f AI \u6765\u6539\u53d8\u4e16\u754c\u3002\u5c06\u521b\u5efa\u2f00\u4e2a\u51fd\u6570\uff0c\u4f7f\u2f64 LangChain \u4f5c\u4e3a\u2f42\u672c\u2f63\u6210\u63a8\u7406\u7684\u2f79\u5173\uff0c\u6307\u5b9a\u2f00\u4e2a\u7c7b\u4f3c\u4e8e\u4e0a\u2faf\u7ed9\u51fa\u7684\u63d0\u793a\u3002\nLangChain \u9700\u8981\u4e0d\u540c\u7684\u2f45\u6cd5\u6765\u4f20\u9012 HuggingFace API \u4ee4\u724c\uff1a\u4f7f\u2f64 os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] \u5c06\u5176\u5b58\u50a8\u4e3a\u73af\u5883\u53d8\u91cf\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6a21\u578b (RedPajama-INCITE-Chat-3B-v1)", "doc_id": "63cd16f9-8a73-4e54-b897-de06b2918843", "embedding": null, "doc_hash": "0ca1aca7b584c93c0464903192816d2e4dc9c601669b8882bf2d5fda8738ae4e", "extra_info": {"page_label": "7", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 548}, "relationships": {"1": "1b9dbaf8-24b1-4ccd-9ee5-12c82a66f445", "3": "4dfb3105-9d7a-4576-988d-d0804a37e282"}}, "__type__": "1"}, "4dfb3105-9d7a-4576-988d-d0804a37e282": {"__data__": {"text": "LangChain \u4f5c\u4e3a\u2f42\u672c\u2f63\u6210\u63a8\u7406\u7684\u2f79\u5173\uff0c\u6307\u5b9a\u2f00\u4e2a\u7c7b\u4f3c\u4e8e\u4e0a\u2faf\u7ed9\u51fa\u7684\u63d0\u793a\u3002\nLangChain \u9700\u8981\u4e0d\u540c\u7684\u2f45\u6cd5\u6765\u4f20\u9012 HuggingFace API \u4ee4\u724c\uff1a\u4f7f\u2f64 os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] \u5c06\u5176\u5b58\u50a8\u4e3a\u73af\u5883\u53d8\u91cf\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6a21\u578b (RedPajama-INCITE-Chat-3B-v1) \u548c\u57fa\u672c\u2f42\u672c\uff08\u2f64\u4e8e\u2f63\u6210\u77ed\u7bc7\u6545\u4e8b\u7684\u2f42\u672c\uff09\u4f5c\u4e3a\u53c2\u6570\u3002\u6b63\u5982\u6240\u770b\u5230\u7684\uff0c\u63d0\u793a\u6a21\u677f\u9075\u5faa\u5feb\u901f\u2f0a\u2ed4\u90e8\u5206\u7684\u8bf4\u660e\uff1a\u4ec5\u6dfb\u52a0\u57fa\u672c\u2f42\u672c\u53d8\u91cf\u4ee5\u5728\u57fa\u672c\u6307\u4ee4\u4e2d\u5305\u542b\u8981\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\uff1a\u4e3a\u4e86\u66f4\u597d\u7684\u4e86\u89e3\u2f63\u6210\u65f6\u95f4\uff0c\u6709\u2f00\u4e9b\u63a7\u5236\u53f0\u6253\u5370\u6307\u4ee4\uff08\u4f8b\u5982\u2f64\u4e8e\u9a8c\u8bc1\u2f63\u6210\u72b6\u6001\u7684\u2f29\u68c0\u67e5\u70b9\uff09\u3002\u73b0\u5728\u51fd\u6570\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u4e0b\u2faf\u5c31\u6765\u8fd0\u2f8f\u770b\u4e0b\u6548\u679c\uff1a\n\u8fd0\u2f8f\u540e AI \u5199\u7684\u6545\u4e8b\u5982\u4e0b\uff1a\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u8fd9\u4e2a\u6545\u4e8b\u8981\u2ed3\u5f97\u591a\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5c06\u5176\u5206\u6210\u2f0f\u4e2a\u6bb5\u843d\uff0c\u5e76\u4e14\u53ea\u91c7\u2f64\u7b2c\u2f00\u6bb5\uff1a\u5bf9\u4e8e\u2f00\u4e2a\u2f29\u6545\u4e8b\u6765\u8bf4\u5df2\u7ecf\u2f9c\u591f\u4e86\u3002# Langchain \u5230 HuggingFace \u7684\u63a8\u8bbadef LC_TextGeneration(model, basetext):    from langchain import PromptTemplate, LLMChain    os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = hfApiToken    llm = HuggingFaceHub(repo_id=model , model_kwargs={\"temperature\":0.45,\"min_length\":30, \"max_length\":250})    print(f\"Running repo: {model}\")        print(\"Preparing template\")    template = \"\"\"<human>: write a very short story about {basetext}.    The story must be a one paragraph.    <bot>: \"\"\"    prompt = PromptTemplate(template=template, input_variables=[\"basetext\"])    llm_chain = LLMChain(prompt=prompt, llm=llm)    start = datetime.datetime.now()     print(\"Running chain...\")    story = llm_chain.run(basetext)    stop = datetime.datetime.now()      elapsed = stop - start    print(f\"Executed in {elapsed}\")    print(story)    return story1234567891011121314151617181920\ntemplate = \"\"\"\"\"\"<human>: write a very", "doc_id": "4dfb3105-9d7a-4576-988d-d0804a37e282", "embedding": null, "doc_hash": "43a80f3aa8aafba722738b06aba07cae3923ea18be12c051fe2c0af9cf699717", "extra_info": {"page_label": "7", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 389, "end": 1662}, "relationships": {"1": "1b9dbaf8-24b1-4ccd-9ee5-12c82a66f445", "2": "63cd16f9-8a73-4e54-b897-de06b2918843", "3": "8a0ed2b8-fbe4-45ca-b228-f03bfb1c0f17"}}, "__type__": "1"}, "8a0ed2b8-fbe4-45ca-b228-f03bfb1c0f17": {"__data__": {"text": " template = \"\"\"<human>: write a very short story about {basetext}.    The story must be a one paragraph.    <bot>: \"\"\"    prompt = PromptTemplate(template=template, input_variables=[\"basetext\"])    llm_chain = LLMChain(prompt=prompt, llm=llm)    start = datetime.datetime.now()     print(\"Running chain...\")    story = llm_chain.run(basetext)    stop = datetime.datetime.now()      elapsed = stop - start    print(f\"Executed in {elapsed}\")    print(story)    return story1234567891011121314151617181920\ntemplate = \"\"\"\"\"\"<human>: write a very short story about {basetext}.    The story must be a one paragraph.    <bot>: \"\"\"\"\"\"123basetext = imageToText(\"./images/a-boy.jpg\")model_TextGeneration=\"togethercomputer/RedPajama-INCITE-Chat-3B-v1\"mystory = LC_TextGeneration(model_TextGeneration, basetext)print(\"=\"*50)\ufb01nalstory = mystory.split('\\n\\n')[0]print(\ufb01nalstory)123456Once upon a time, there was a boy named Jack who loved to read. He would spend hours buried in a pile of books, lost in the worlds that only books could create.One day, Jack was sitting on top of the pile, lost in a book about dragons and knights. Suddenly, he felt a tug on his book. He looked up to see a small creature trying to get his attention.\"What are you doing?\" Jack asked.12345678", "doc_id": "8a0ed2b8-fbe4-45ca-b228-f03bfb1c0f17", "embedding": null, "doc_hash": "ebe20c7536595abfb419dcac9ae39633eaa2e73799558f30f55bd7ebf528f0ef", "extra_info": {"page_label": "7", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 1281, "end": 2542}, "relationships": {"1": "1b9dbaf8-24b1-4ccd-9ee5-12c82a66f445", "2": "4dfb3105-9d7a-4576-988d-d0804a37e282"}}, "__type__": "1"}, "539a6040-8811-4fa1-8fcd-7d3fb8492963": {"__data__": {"text": "\u7b2c\u4e94\u6b65\uff1a\u521b\u5efa\u4ece\u6545\u4e8b\u751f\u6210\u97f3\u9891\u7684\u51fd\u6570\u7b2c\u4e94\u6b65\uff1a\u521b\u5efa\u4ece\u6545\u4e8b\u751f\u6210\u97f3\u9891\u7684\u51fd\u6570  \u73b0\u5728\u6709\u4e86\u2f42\u672c\u6545\u4e8b\uff0c\u63a5\u4e0b\u6765\u5c06\u4f7f\u2f64\u2f42\u672c\u8f6c\u8bed\u2fb3\u6a21\u578b\u6765\u4e3a\u2f63\u6210\u2fb3\u9891\u3002\u5728 Hugging Face Model \u90e8\u5206\uff0c\u5411\u4e0b\u6eda\u52a8\u5de6\u4fa7\u2faf\u677f\u9009\u62e9 text-to-speech \u9009\u9879\u8fc7\u6ee4\u2fb3\u9891\u4efb\u52a1\u3002\u53ef\u4ee5\u5c1d\u8bd5\u4efb\u4f55\u2f00\u79cd\u6d41\u2f8f\u7684\u58f0\u2fb3\uff1a\u9009\u62e9 espnet/kan-bayashi_ljspeech_vits \u3002\u4f7f\u2f64 requests \u2f45\u6cd5\u521b\u5efa\u2f00\u4e2a\u2f64\u4e8e\u2f42\u672c\u8f6c\u8bed\u2fb3\u2f63\u6210\u7684\u51fd\u6570\uff1a\u5c06\u5728 Header \u4e2d\u5305\u542b\u2f00\u4e2a\u5e26\u6709 hfApiToken \u7684 f \u5b57\u7b26\u4e32\uff08\u5982\u679c\u4e0d\u5305\u542b\uff0cAPI \u8bf7\u6c42\u5c06\u88ab\u62d2\u7edd\uff09\u3002\u7b2c\u516d\u6b65\uff1a\u4f7f\u7528 Streamlit \u96c6\u6210\u6240\u6709\u529f\u80fd\u7b2c\u516d\u6b65\uff1a\u4f7f\u7528 Streamlit \u96c6\u6210\u6240\u6709\u529f\u80fd  \u53ef\u4ee5\u5728 GitHub \u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u6240\u6709\u56fe\u50cf\u548c\u2fb3\u9891\u2f42\u4ef6\u4ee5\u53ca\u6700\u7ec8\u4ee3\u7801\u3002Streamlit \u662f\u2f00\u4e2a\u2f64\u4e8e\u6784\u5efa\u6570\u636e Web \u5e94\u2f64\u7a0b\u5e8f\u7684\u5e93\uff0c\u2f46\u9700\u4e86\u89e3\u4efb\u4f55\u524d\u7aef\u6280\u672f\uff08\u4f8b\u5982 HTML \u548c CSS\uff09\u3002\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u6b64\u5904\u66f4\u591a\u2f42\u6863\u3002\u521b\u5efa\u2f00\u4e2a\u65b0\u7684\u2f42\u4ef6 main.py \uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1aThe creature looked up at him with big, round eyes. \"I'm trying to get your attention,\" it said. \"I'm a bookworm too. We're both in here, aren't we?\"Jack smiled. \"I suppose we are,\" he said. \"What are you reading?\"The creature looked down at the book in its hand. \"This one,\" it said. \"It's about a brave knight who saves a princess from a dragon.\"Jack nodded. \"I've been reading a lot of those lately,\" he said.910111213\n# \u4f7f\u2f64 Streamlit \u8fdb\u2f8f HuggingFace \u63a8\u7406\u7684 Python \u5e94\u2f64\u7a0b\u5e8f# AI \u63a8\u7406\u5e93from huggingface_hub import InferenceClientfrom langchain import HuggingFaceHubimport requests# \u5185\u90e8\u4f7f\u2f64import osimport datetimeimport uuid# STREAMLITimport streamlit as st# \u914d\u7f6e\u2f42\u4ef6from con\ufb01g import (HUGGING_FACE_API_TOKEN)hfApiToken = HUGGING_FACE_API_TOKEN# \u53ea\u6709HuggingFace Hub \u63a8\u7406model_TextGeneration=\"togethercomputer/RedPajama-INCITE-Chat-3B-v1\"model_Image2Text =", "doc_id": "539a6040-8811-4fa1-8fcd-7d3fb8492963", "embedding": null, "doc_hash": "9b9290e1b5ed1dfdcafed3470a90e0ba94e032da626c3bf5fcd5130b506a2d75", "extra_info": {"page_label": "8", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 1275}, "relationships": {"1": "8c04d781-c147-4457-9563-5c071ef6899a", "3": "02558b94-474f-426b-8aee-9dfa957a243c"}}, "__type__": "1"}, "02558b94-474f-426b-8aee-9dfa957a243c": {"__data__": {"text": "reading a lot of those lately,\" he said.910111213\n# \u4f7f\u2f64 Streamlit \u8fdb\u2f8f HuggingFace \u63a8\u7406\u7684 Python \u5e94\u2f64\u7a0b\u5e8f# AI \u63a8\u7406\u5e93from huggingface_hub import InferenceClientfrom langchain import HuggingFaceHubimport requests# \u5185\u90e8\u4f7f\u2f64import osimport datetimeimport uuid# STREAMLITimport streamlit as st# \u914d\u7f6e\u2f42\u4ef6from con\ufb01g import (HUGGING_FACE_API_TOKEN)hfApiToken = HUGGING_FACE_API_TOKEN# \u53ea\u6709HuggingFace Hub \u63a8\u7406model_TextGeneration=\"togethercomputer/RedPajama-INCITE-Chat-3B-v1\"model_Image2Text = \"Salesforce/blip-image-captioning-base\"model_Text2Speech=\"espnet/kan-bayashi_ljspeech_vits\"def imageToText(url):    from huggingface_hub import InferenceClient    client = InferenceClient(token=hfApiToken)    model_Image2Text = \"Salesforce/blip-image-captioning-base\"    text = client.image_to_text(url,                                model=model_Image2Text)    print(text)    return textdef  text2speech(text):  import requests  API_URL = \"https://api-inference.huggingface.co/models/espnet/kan-bayashi_ljspeech_vits\"  headers = {\"Authorization\": f\"Bearer {hfApiToken}\"}  payloads = {      \"inputs\" : \"\".join(text.split('\\n\\n'))  }  response = requests.post(API_URL, headers=headers, json=payloads)  with open('audiostory.\ufb02ac', 'wb') as \ufb01le:1234567891011121314151617181920212223242526272829303132333435363738394041", "doc_id": "02558b94-474f-426b-8aee-9dfa957a243c", "embedding": null, "doc_hash": "c52852535a9ca030221532d5a863f010bc0394be6d28c4258ebe485a925266ad", "extra_info": {"page_label": "8", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 814, "end": 2091}, "relationships": {"1": "8c04d781-c147-4457-9563-5c071ef6899a", "2": "539a6040-8811-4fa1-8fcd-7d3fb8492963"}}, "__type__": "1"}, "aa6d7258-2af9-4bf1-957e-d7ae23635333": {"__data__": {"text": "\u4fdd\u5b58 python \u2f42\u4ef6\u5e76\u6fc0\u6d3b venv\uff0c\u8fd0\u2f8f    \ufb01le.write(response.content)# Langchain \u5230 Hugging Face \u7684\u63a8\u7406def LC_TextGeneration(model, basetext):    from langchain import PromptTemplate, LLMChain    os.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = hfApiToken    llm = HuggingFaceHub(repo_id=model , model_kwargs={\"temperature\":0.45,\"min_length\":30, \"max_length\":250})    print(f\"Running repo: {model}\")        print(\"Preparing template\")    template = \"\"\"<human>: write a very short story about {basetext}.    The story must be a one paragraph.    <bot>: \"\"\"    prompt = PromptTemplate(template=template, input_variables=[\"basetext\"])    llm_chain = LLMChain(prompt=prompt, llm=llm)    start = datetime.datetime.now()      print(\"Running chain...\")    story = llm_chain.run(basetext)    stop = datetime.datetime.now()     elapsed = stop - start    print(f\"Executed in {elapsed}\")    print(story)    return storydef generate_uuid():    return uuid.uuid4().hexdef main():  st.set_page_con\ufb01g(page_title=\"Your Photo Story Creatror App\", page_icon='\n!\n')  st.header(\"Turn your Photos into Amazing Audio Stories\")  st.image('./assets/banner.png', use_column_width=True)  st.markdown(\"1. Select a photo from your pc\\n 2. AI detect the photo description\\n3. AI write a story about the photo\\n4. AI generate an audio \ufb01le of the story\")    image_\ufb01le = st.\ufb01le_uploader(\"Choose an image...\", type=['png', 'jpg'] )  if image_\ufb01le is not None:    print(image_\ufb01le)    bytes_data = image_\ufb01le.getvalue()    save_name = generate_uuid()    upload_path = f\"./upload/{save_name}.jpg\"    with open(upload_path, \"wb\") as \ufb01le:      \ufb01le.write(bytes_data)    st.image(image_\ufb01le, caption=\"Uploaded Image...\",             use_column_width=True)        st.warning(\"Generating Photo description\",  icon=\"\n\"\n\")    basetext = imageToText(upload_path)    with st.expander(\"Photo Description\"):      st.write(basetext)        st.warning(\"Generating Photo Story\",  icon=\"\n\"\n\")    mystory = LC_TextGeneration(model_TextGeneration, basetext)    \ufb01nalstory = mystory    print(\"=\"*50)    with st.expander(\"Photo Story\"):      st.write(\ufb01nalstory)        st.warning(\"Generating Audio Story\",  icon=\"\n\"\n\")    text2speech(\ufb01nalstory)        st.audio('audiostory.\ufb02ac')    st.success(\"Audio Story completed!\")if __name__ == '__main__':  ", "doc_id": "aa6d7258-2af9-4bf1-957e-d7ae23635333", "embedding": null, "doc_hash": "03254976942b085067b859efa48ae68c6d554057e8891a9d2bcb79c9e4313b01", "extra_info": {"page_label": "9", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 2259}, "relationships": {"1": "47221a62-30f3-4258-ba96-1c5f4f173672", "3": "7d9f263f-a703-4405-8335-23ea4edf2b9c"}}, "__type__": "1"}, "7d9f263f-a703-4405-8335-23ea4edf2b9c": {"__data__": {"text": "with st.expander(\"Photo Description\"):      st.write(basetext)        st.warning(\"Generating Photo Story\",  icon=\"\n\"\n\")    mystory = LC_TextGeneration(model_TextGeneration, basetext)    \ufb01nalstory = mystory    print(\"=\"*50)    with st.expander(\"Photo Story\"):      st.write(\ufb01nalstory)        st.warning(\"Generating Audio Story\",  icon=\"\n\"\n\")    text2speech(\ufb01nalstory)        st.audio('audiostory.\ufb02ac')    st.success(\"Audio Story completed!\")if __name__ == '__main__':   main()42434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107streamlit run main.py1", "doc_id": "7d9f263f-a703-4405-8335-23ea4edf2b9c", "embedding": null, "doc_hash": "0de15fdb1f1a5a58f4754cc950f5495f4b6cae2e6275ccfeb849088af338ba08", "extra_info": {"page_label": "9", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 1791, "end": 2428}, "relationships": {"1": "47221a62-30f3-4258-ba96-1c5f4f173672", "2": "aa6d7258-2af9-4bf1-957e-d7ae23635333"}}, "__type__": "1"}, "e25965f2-9a9c-4281-a235-25bc6711d891": {"__data__": {"text": "\u5e94\u8be5\u770b\u5230\u5982\u4e0b\u6548\u679c\uff1a\n\u5b8c\u6574\u4ee3\u7801\u5728GitHub\u4ed3\u5e93\uff1aGitHub\uff1ahttps://github.com/QuintionTang/AI-Sto!\u603b\u7ed3\u603b\u7ed3  \u901a\u8fc7\u2f42\u7ae0\u7684\u5e94\u2f64\uff0c\u53d1\u73b0\u5f00\u6e90\u8bed\u2f94\u6a21\u578b\u7684\u2f12\u91cf\u662f\u5f3a\u2f24\u7684\uff0c\u5e86\u5e78\u2f63\u6d3b\u5728\u8fd9\u4e2a\u5e74\u4ee3\uff0c\u65f6\u4ee3\u4e0d\u8f9c\u8d1f\u3002\u8fd9\u53ea\u662f\u2f00\u4e2a\u7b80\u5355\u7684\u5e94\u2f64\uff0c\u5176\u5b9e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u2f8f\u6269\u5c55\uff0c\u4f7f\u5176\u6210\u4e3a\u5b66\u4e60\u82f1\u8bed\u7684AI\u52a9\u7406\uff0c\u966a\u7ec3\u2f1d\u8bed\u3001\u770b\u56fe\u5199\u8bdd\u3001\u5199\u4f5c\u2f42\u7b49\u7b49\u3002", "doc_id": "e25965f2-9a9c-4281-a235-25bc6711d891", "embedding": null, "doc_hash": "0234bd02e6ef4f59da2913df7c83bb01fa4d2e7403a4f66f810537eb3e43bc5d", "extra_info": {"page_label": "10", "file_name": "\u5229\u7528Streamlit \u548c Hugging Face \u521b\u5efa\u514d\u8d39AI\u6545\u4e8b\u673a.pdf"}, "node_info": {"start": 0, "end": 168}, "relationships": {"1": "59732c75-9ba5-482e-857e-677e947ff4c1"}}, "__type__": "1"}, "db1f39fd-17ca-459f-a53c-b3861ffc606d": {"__data__": {"text": "\u4f7f\u2f64Streamlit\u548cHugging Face\u7684\u514d\u8d39LLM\u6458\u8981\u89e3\u9501\u4e2a\u2f08\u7b2c\u2f06\u2f24\u8111\uff1a\u6784\u5efa\u5728 PC \u4e0a\u8fd0\u2f8f\u7684 Python Web \u5e94\u2f64\u7a0b\u5e8f\u3002\u4f5c\u4e3a\u5f00\u53d1\u8005\u5c31\u662f\u8981\u4e60\u60ef\u4e0d\u505c\u7684\u5b66\u4e60\uff0c\u5982\u679c\u6b63\u5728\u9605\u8bfb\u672c\u2f42\uff0c\u90a3\u5c31\u610f\u5473\u7740\u4f60\u548c\u8bb8\u591a\u5f00\u53d1\u8005\u2f00\u6837\uff0c\u60f3\u8981\u5b66\u4e60\u66f4\u591a\uff0c\u60f3\u4e86\u89e3\u5f88\u591a\u6709\u610f\u601d\u7684\u4e1c\u2ec4\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u8fde\u63a5\u7684\u3002\u2f7d\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5904\u7406\u2f24\u91cf\u7684\u4fe1\u606f\uff0c\u9605\u8bfb\u2f24\u91cf\u7684\u4e66\u7c4d\uff1a\u6709\u65f6\u5019\uff0c\u4f1a\u4e0d\u4f1a\u89c9\u5f97\u65f6\u95f4\u4e0d\u591f\u2f64\uff0c\u6548\u7387\u4e0d\u2fbc\uff1f\u7684\u786e\u5982\u6b64\uff0c\u901a\u5e38\u9700\u8981\u5904\u7406\u2f24\u91cf\u7684\u5f00\u53d1\u2f42\u6863\uff0c\u9700\u8981\u5c3d\u53ef\u80fd\u591a\u5730\u9605\u8bfb\uff0c\u4ee5\u4e86\u89e3\u8fd9\u4e2a\u88ab\u79f0\u4e3a\u2f08\u2f2f\u667a\u80fd\u7684\u65b0\u4e16\u754c\u3002\u5982\u679c\u60f3\u7ba1\u7406\u597d\u2f2f\u4f5c\u3001\u5174\u8da3\u548c\u5bb6\u5ead\uff0c\u5c31\u9700\u8981\u2f00\u4e2a\u7b56\u7565\u3002\u5f00\u59cb\u603b\u7ed3\u6750\u6599\uff08\u2f42\u7ae0\u3001\u7535\u2f26\u4e66\u7c4d\u3001\u535a\u5ba2\u2f42\u7ae0\u7b49\u7b49\uff09\uff0c\u7136\u540e\u5728\u7b14\u8bb0\u4e2d\u5c06\u5b83\u4eec\u5206\u7c7b\u3002\u603b\u7ed3\u2f00\u4e9b\u5217\u5185\u5bb9\u7684\u4e3b\u9898\uff0c\u7136\u540e\u5feb\u901f\u53cd\u9988\u662f\u5426\u9700\u8981\u6df1\u2f0a\u7814\u7a76\u3002\u5728\u672c\u2f42\u4e2d\uff0c\u5c06\u5c55\u793a\u5982\u4f55\u4f7f\u2f64HuggingFace\u548cPython\u4f7f\u2f64\u514d\u8d39\u2f24\u8bed\u2f94\u6a21\u578b\uff08LLM\uff09\u6765\u6784\u5efa\u2f00\u4e2a Summarization \u5e94\u2f64\u7a0b\u5e8f\uff1a\u4f7f\u2f64\u2f83\u2f30\u2f47\u5e38\u6ca1\u6709GPU\u7684\u7535\u8111\u3002\u6574\u4e2a\u8fc7\u7a0b\u6d89\u53ca\u4ee5\u4e0b\u2f0f\u4e2a\u6b65\u9aa4:1. \u4e0b\u8f7d LaMini \u6a21\u578b2. \u51c6\u5907 Python \u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d563. \u6d4b\u8bd5\u6c47\u603b Pipeline4. \u4f7f\u2f64 Streamlit \u51c6\u5907\u5e76\u6d4b\u8bd5\u56fe\u5f62\u754c\u2faf5. \u5c06\u903b\u8f91\u548c\u56fe\u5f62\u754c\u2faf\u6574\u54081.\u4e0b\u8f7d LaMini \u6a21\u578b1.\u4e0b\u8f7d LaMini \u6a21\u578b  \u5c06\u4f7f\u2f64 Hugging Face \u7684 LaMini-LM\uff1a\u8fd9\u662f\u57fa\u4e8e Flan-T5 \u7cfb\u5217\u7684\u2f29\u578b\u6a21\u578b\u3002\u5b83\u62e5\u6709 248M", "doc_id": "db1f39fd-17ca-459f-a53c-b3861ffc606d", "embedding": null, "doc_hash": "5d17fa0bf274a7ebbb6f93dc2ff17f285b8881f444d8064b6b5b166c7bd35da0", "extra_info": {"page_label": "1", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 594}, "relationships": {"1": "d7f68784-2080-4fe7-832f-5eaee67133e8", "3": "cc997008-4ae6-4c89-865f-d88130df13e3"}}, "__type__": "1"}, "cc997008-4ae6-4c89-865f-d88130df13e3": {"__data__": {"text": "\u4e0b\u8f7d LaMini \u6a21\u578b2. \u51c6\u5907 Python \u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d563. \u6d4b\u8bd5\u6c47\u603b Pipeline4. \u4f7f\u2f64 Streamlit \u51c6\u5907\u5e76\u6d4b\u8bd5\u56fe\u5f62\u754c\u2faf5. \u5c06\u903b\u8f91\u548c\u56fe\u5f62\u754c\u2faf\u6574\u54081.\u4e0b\u8f7d LaMini \u6a21\u578b1.\u4e0b\u8f7d LaMini \u6a21\u578b  \u5c06\u4f7f\u2f64 Hugging Face \u7684 LaMini-LM\uff1a\u8fd9\u662f\u57fa\u4e8e Flan-T5 \u7cfb\u5217\u7684\u2f29\u578b\u6a21\u578b\u3002\u5b83\u62e5\u6709 248M \u53c2\u6570\uff0c\u5728\u4e0b\u6e38 NLP \u4efb\u52a1\uff08\u2f42\u672c\u2f63\u6210\u3001QnA \u548c\u6458\u8981\uff09\u4e0a\u4e0e Aplaca-7B \u548c LLaMa-7B \u7684\u6027\u80fd\u76f8\u540c\u3002\u6b64\u8bbe\u7f6e\u5df2\u5728\u8fd0\u2f8f Python 3.10 \u7684 Windows 10 64 \u4f4d\u548c Mac\uff08Intel \u82af\u2f5a\uff09\u4e0a\u8fdb\u2f8f\u4e86\u6d4b\u8bd5\u3002\u68c0\u67e5\u4ee5\u4e0b\u94fe\u63a5\u4ee5\u83b7\u53d6\u4e0e\u5176\u4ed6 Python \u7248\u672c\u76f8\u5173\u7684\u63d0\u793a\u3002\u6ce8\u610f torch \u7684\u5b89\u88c5\uff0c\u56e0\u4e3a pytorch \u662f\u9488\u5bf9\u7279\u5b9a\u7684 python \u7248\u672c\u7f16\u8bd1\u7684\uff08\u4e0b\u2faf\u7684\u94fe\u63a5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff09\u4e3a\u9879\u2f6c\u521b\u5efa\u2f00\u4e2a\u65b0\u2f42\u4ef6\u5939 ai-summarization\u5728\u9879\u2f6c\u2f6c\u5f55\u4e2d\u521b\u5efa\u2f00\u4e2a\u2f26\u2f42\u4ef6\u5939 model\u70b9\u51fb Hugging Face \u5b58\u50a8\u5e93 LaMini-Flan-T5\u2013248M\uff0c\u5e76\u5c06\u2f6c\u5f55\u4e2d\u7684\u6240\u6709\u2f42\u4ef6\u4e0b\u8f7d\u5230\u521a\u521a\u521b\u5efa\u7684 model \u2f42\u4ef6\u5939\u4e2d\u3002\n2. \u51c6\u5907Python\u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d562. \u51c6\u5907Python\u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d56  ", "doc_id": "cc997008-4ae6-4c89-865f-d88130df13e3", "embedding": null, "doc_hash": "5132fdaff5a8507971569b4f25d9219288adaafaf783c63b39db0115dec7f79e", "extra_info": {"page_label": "1", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 420, "end": 952}, "relationships": {"1": "d7f68784-2080-4fe7-832f-5eaee67133e8", "2": "db1f39fd-17ca-459f-a53c-b3861ffc606d"}}, "__type__": "1"}, "8114c579-4c32-4a72-b6c8-3b293b31f624": {"__data__": {"text": "\u6709\u5f88\u591a\u5e93\u9700\u8981\u5b89\u88c5\uff0c\u6ce8\u610f\uff0c\u4e0e Hugging Face \u6a21\u578b\u4ea4\u4e92\u7684\u6838\u2f3c\u662f torch \u548c Transformers \u5e93\uff0c\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0a\u2faf\u63d0\u5230\u7684\u94fe\u63a5\u3002\u5728 ai-summarization \u2f6c\u5f55\u4e2d\uff0c\u521b\u5efa\u2f00\u4e2a\u865a\u62df\u73af\u5883\u5e76\u6fc0\u6d3b\u5b83\uff1a\u5728 venv \u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u5728\u4e3b\u2f6c\u5f55 ai-summarization \u4e2d\u521b\u5efa\u2f00\u4e2a\u65b0 python \u2f42\u4ef6main.py \uff0c\u5c06\u9a8c\u8bc1\u6240\u6709\u5e93\u662f\u5426\u5df2\u6b63\u786e\u5b89\u88c5\u3002\n\u8f6c\u5230\u7ec8\u7aef\uff0c\u5728\u6fc0\u6d3b venv \u72b6\u6001\u4e0b\u8fd0\u2f8f python3 main.py\u3002\u5982\u679c\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u5219\u8868\u793a\u2f00\u5207\u90fd\u5b89\u88c5\u6210\u529f\u4e86\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u5f02\u5e38\uff1a\u53ef\u4ee5\u91cd\u65b0\u5b89\u88c5\u5305\uff1a3. \u6d4b\u8bd5\u6458\u8981\u7ba1\u90533. \u6d4b\u8bd5\u6458\u8981\u7ba1\u9053  \u8fdb\u2f8f\u6458\u8981\u7684\u2f45\u6cd5\u6709\u5f88\u591a\u79cd\uff1a\u8fd9\u2fa5\u5c06\u4f7f\u2f64\u7ba1\u9053\u2f45\u6cd5\u3002\u6765\u2f83 Transformers \u5e93\u7684 Pipelines \u662f\u4e13\u2f64\u4e8e\u7279\u5b9a\u4efb\u52a1\uff08\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u3001\u5c4f\u853d\u8bed\u2f94\u5efa\u6a21\u3001\u60c5\u611f\u5206\u6790\u3001\u7279\u5f81\u63d0\u53d6\u548c\u95ee\u7b54\uff09\u7684\u2f2f\u5177\u3002\u4f7f\u2f64\u6240\u9700\u7684\u6240\u6709\u5bfc\u2f0a\u548c\u7ba1\u9053\u7684\u521d\u59cb\u5316\u66f4\u65b0 main.py \u2f42\u4ef6\u3002\n\u6a21\u578b\u5b58\u50a8\u5728 checkpoint\uff08\u5bf9\u4e8e\u672c\u9879\u2f6c\u6765\u8bf4\u662f\u2f6c\u5f55 model\uff09\uff1a\u5b83\u4f5c\u4e3a\u7f16\u7801\u5668-\u89e3\u7801\u5668\u6a21\u578b\uff0c\u56e0\u6b64\u5c06\u5176\u8fdb\u2f8f\u521d\u59cb\u5316\uff1apython3 -m venv venvsource venv/bin/activate # ubuntu/Macvenv\\Scripts\\activate # windows123pip install mkl mkl-include # MAC \u4f7f\u2f64CPU\u5fc5\u987b\u5b89\u88c5 pip install torch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 # \u6838\u2f3c# \u5b89\u88c5 Hugging Face Transformer\u5e93\uff0c\u9700\u8981\u4e0eLLM\u8fdb\u2f8f\u4ea4\u4e92pip install git+https://github.com/huggingface/transformers # \u8fd9\u4e9b\u5c06\u5728\u4e0b\u2faf\u2f64\u4e8e\u4e0e\u2f42\u6863\u4ea4\u4e92pip install langchain==0.0.173 pip install faiss-cpu==1.7.4pip install unstructured==0.6.8pip install pytesseract==0.3.10pip install pypdf==3.9.0pip install pdf2image==1.16.3pip install sentence_transformers==2.2.2#", "doc_id": "8114c579-4c32-4a72-b6c8-3b293b31f624", "embedding": null, "doc_hash": "9fc897cfbd149a78078cb56566eefc3824c8083cda4399ac6bddaa71343f6c7a", "extra_info": {"page_label": "2", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 1013}, "relationships": {"1": "330dab2c-902c-4802-9638-af91470da567", "3": "a902ef27-115b-4a69-8f43-5cb67dd9ae4e"}}, "__type__": "1"}, "a902ef27-115b-4a69-8f43-5cb67dd9ae4e": {"__data__": {"text": "torchvision==0.12.0 torchaudio==0.11.0 # \u6838\u2f3c# \u5b89\u88c5 Hugging Face Transformer\u5e93\uff0c\u9700\u8981\u4e0eLLM\u8fdb\u2f8f\u4ea4\u4e92pip install git+https://github.com/huggingface/transformers # \u8fd9\u4e9b\u5c06\u5728\u4e0b\u2faf\u2f64\u4e8e\u4e0e\u2f42\u6863\u4ea4\u4e92pip install langchain==0.0.173 pip install faiss-cpu==1.7.4pip install unstructured==0.6.8pip install pytesseract==0.3.10pip install pypdf==3.9.0pip install pdf2image==1.16.3pip install sentence_transformers==2.2.2# \u53ea\u9700\u8981\u5728CPU\u4e0a\u8fd0\u2f8fpip install accelerate==0.19.0# \u5bf9\u4e8eGUI\u548cweb\u5e94\u2f64\u7a0b\u5e8fpip install streamlit12345678910111213141516171819from transformers import AutoTokenizer, AutoModelForSeq2SeqLMfrom transformers import pipelineimport torchimport streamlit1234ImportError: accelerate>=0.20.3 is required for a normal functioning of this module, but found accelerate==0.19.0.1pip install accelerate==0.20.31\n########### GUI IMPORTS ################import streamlit as st#### IMPORTS FOR AI PIPELINES ###############from transformers import AutoTokenizer, AutoModelForSeq2SeqLMfrom transformers import pipelinefrom transformers import AutoModel, T5Tokenizer, T5Modelfrom transformers import T5ForConditionalGenerationfrom langchain.llms import HuggingFacePipelineimport torch123456789# \u8bbe\u7f6e model \u8def\u5f841", "doc_id": "a902ef27-115b-4a69-8f43-5cb67dd9ae4e", "embedding": null, "doc_hash": "175656ef8a845dc5503bcfbcdc0a81da2c7ed1822139fb3a99e8e08439552a29", "extra_info": {"page_label": "2", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 639, "end": 1781}, "relationships": {"1": "330dab2c-902c-4802-9638-af91470da567", "2": "8114c579-4c32-4a72-b6c8-3b293b31f624"}}, "__type__": "1"}, "965cf331-a6a5-486e-bfea-7fe98c58f88d": {"__data__": {"text": "\u7ba1\u9053\u6307\u5b9a\u5e0c\u671b LLM \u6267\u2f8f\u7684\u4efb\u52a1\uff1a\u8bbe\u7f6e\u6a21\u578b\u6807\u8bb0\u5668\u5e76\u6dfb\u52a0\u2f00\u4e9b\u7279\u5b9a\u53c2\u6570\uff08\u6458\u8981\u7684 max_length \u548c min_length\uff09\u3002\n\u4e3a\u4e86\u66f4\u597d\u7684\u6d4b\u8bd5\u5b83\uff0c\u5c06\u6cbf\u7740\u2f42\u672c\u5206\u914d\u7ed9\u2f00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u7136\u540e\u5c06\u5728\u5176\u4e0a\u6267\u2f8f\u7ba1\u9053\uff1a\n\u5728 venv \u5904\u4e8e\u6fc0\u6d3b\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u7ec8\u7aef\u8fd0\u2f8f python3 main.py\uff0c\u5c06\u4f1a\u770b\u5230\u4e0b\u2faf\u8fd9\u6837\u7684\u7ed3\u679c\u3002\n\u7531\u4e8e\u662f\u2f00\u4e2a\u2f29\u7684\u6d4b\u8bd5\uff0c\u5b58\u5728\u2f00\u4e9b\u9519\u8bef\uff1a\u8fd9\u662f\u56e0\u4e3a\u539f\u2f42\u2ed3\u5ea6\u6709\u70b9\u2ed3\uff0c\u7a0d\u540e\u4f1a\u5bf9\u5176\u8fdb\u2f8f\u5207\u5272\u3002\u8bf7\u6ce8\u610f\uff0c\u7ba1\u9053\u7684\u7ed3\u679c\u662f\u2f00\u4e2a\u5e26\u6709\u5b57\u5178\u7684\u5217\u8868\uff1a\u56e0\u6b64\uff0c\u8981\u4ec5\u8c03\u2f64\u2f42\u672c\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u4f7f\u2f64 [0]\u4f5c\u4e3a\u5217\u8868\u4e2d\u7684\u7b2c\u2f00\u4e2a\u9879\u2f6c\uff0c\u2f7d ['summary_text'] \u662f\u60f3\u8981\u7684\u503c\uff08\u5b57\u7b26\u4e32\uff09\u7684\u952e\u30024. \u4f7f\u7528 Streamlit \u51c6\u5907\u5e76\u6d4b\u8bd5\u56fe\u5f62\u754c\u97624. \u4f7f\u7528 Streamlit \u51c6\u5907\u5e76\u6d4b\u8bd5\u56fe\u5f62\u754c\u9762  \u73b0\u5728\u903b\u8f91\u90e8\u5206\u5df2\u7ecf\u5b8c\u6210\uff08\u9664\u4e86\u2f42\u672c\u5206\u5272\u5668\uff09\uff0c\u63a5\u4e0b\u6765\u5c06\u6df1\u2f0a\u7814\u7a76 Streamlit \u5e94\u2f64\u7a0b\u5e8f\u3002checkpoint = \"./model/\"  # \u5b9e\u9645\u4e0a\u662fLaMini-Flan-T5-248M# \u521d\u59cb\u5316\u6807\u8bb0\u5668\u548c\u6a21\u578btokenizer = T5Tokenizer.from_pretrained(checkpoint)base_model = T5ForConditionalGeneration.from_pretrained(                                            checkpoint,                                            device_map='auto',                                            torch_dtype=torch.\ufb02oat32)2345678# \u521d\u59cb\u5316\u7ba1\u9053pipe_sum = pipeline('summarization',                     model = base_model,                    tokenizer = tokenizer,                    max_length = 350,                     min_length", "doc_id": "965cf331-a6a5-486e-bfea-7fe98c58f88d", "embedding": null, "doc_hash": "cfdf48dea9c3fcd9233f47ed44811a8058aee52ed9cd754d1a41c2961ad67349", "extra_info": {"page_label": "3", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 928}, "relationships": {"1": "b46c794a-060b-4b4e-8202-b26b3c2e447a", "3": "acbe384c-1f48-41ae-94ef-0e01a47ecf1c"}}, "__type__": "1"}, "acbe384c-1f48-41ae-94ef-0e01a47ecf1c": {"__data__": {"text": "          device_map='auto',                                            torch_dtype=torch.\ufb02oat32)2345678# \u521d\u59cb\u5316\u7ba1\u9053pipe_sum = pipeline('summarization',                     model = base_model,                    tokenizer = tokenizer,                    max_length = 350,                     min_length = 25)123456text = \"It was way back in 2011 when the game L.A. Noire came out with absolutely amazing life-like facial animations that seemed so ahead of every other game. Now, almost a decade later, we still haven\u2019t seen many other games come anywhere close to matching its level in terms of delivering realistic facial expressions.This is because the facial scanning technology used in the development of this game, called MotionScan, was extremely expensive and the \ufb01le sizes of the captured animations was too big, which is why it made it impractical for most publishers to adopt this technology for their games.Let\u2019s take a look at the architecture of this Deep Learning Framework in the \ufb01gure below. It consists of a Motion Module and an Appearance Module. The driving video is the input to the Motion Module and the Source Image is our target object which is the input to the Appearance Module.The Motion Module consists of an encoder that learns a latent representation containing sparse keypoints of high importance in relation to the motion of the object, which is a face in this scenario. The movement of these keypoints across the different frames of the driving video generate a motion \ufb01eld, which is driven by a function that we want our model to learn. The authors use Taylor Expansion to approximate this function to the \ufb01rst order that creates this motion \ufb01eld. According to the authors, this is the \ufb01rst time \ufb01rst order approximation has been used to model motion. Moreover, learned af\ufb01ne transformations of these keypoints are combined to produce Dense Motion Field. The dense motion \ufb01eld predicts the motion of every individual pixel of the frame, as opposed to focusing on just the keypoints in the sparse motion \ufb01eld. Next, the motion module also produces an Occlusion Map, which highlights the pixels of the frame that need to be in-painted, arising from the movements of the head w.r.t. the background.The Appearance Module uses an encoder to encode the source image, which is then combined with the Motion Field and the Occlusion Map to animate the source image. A Generator model is used for this purpose. During the self-supervised training process, a still frame from the driving video is used as the source image and the learned motion \ufb01eld is used to animate this source image. The actual frames of the video act as the ground truth for the generated motion, hence it is self-supervised training. During the testing/inference phase, this source image can be replaced with any other image from the same object category, and doesn\u2019t have to arrive from the driving video.I wanted to explore how well this model works on some virtually designed faces of game characters. The authors have shared its code and an easy-to-use Google Colab notebook to test this out. Here\u2019s how their trained model looks when tested on different characters from the game Grand Theft Auto.As you can see, it is extremely easy to create life-like animations with this AI, and I think it will be used by almost every game artist for creating facial animations in games. Moreover, in order to perform Mo-Cap with this technique, all we need now is one camera and any average computer with a GPU and this AI will take care of the rest,", "doc_id": "acbe384c-1f48-41ae-94ef-0e01a47ecf1c", "embedding": null, "doc_hash": "51438dc387c96ed553ae3ad161eab7eecd3a52d82d60c308b63004333b5a0dc8", "extra_info": {"page_label": "3", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 777, "end": 4310}, "relationships": {"1": "b46c794a-060b-4b4e-8202-b26b3c2e447a", "2": "965cf331-a6a5-486e-bfea-7fe98c58f88d", "3": "6ac6d2e7-0ba8-4ce8-860f-cfb6ee63d54d"}}, "__type__": "1"}, "6ac6d2e7-0ba8-4ce8-860f-cfb6ee63d54d": {"__data__": {"text": "hence it is self-supervised training. During the testing/inference phase, this source image can be replaced with any other image from the same object category, and doesn\u2019t have to arrive from the driving video.I wanted to explore how well this model works on some virtually designed faces of game characters. The authors have shared its code and an easy-to-use Google Colab notebook to test this out. Here\u2019s how their trained model looks when tested on different characters from the game Grand Theft Auto.As you can see, it is extremely easy to create life-like animations with this AI, and I think it will be used by almost every game artist for creating facial animations in games. Moreover, in order to perform Mo-Cap with this technique, all we need now is one camera and any average computer with a GPU and this AI will take care of the rest, making it extremely cheap and feasible for game animators to use this tech on a large scale. This is why I\u2019m excited about the massive improvements that can be brought by this AI in the development of future games.\"# \u5728\u2f42\u672c\u4e0a\u8fd0\u2f8f\u7ba1\u9053\u5e76\u6253\u5370\u7ed3\u679cresult = pipe_sum(text)print(result)1234\nToken indices sequence length is longer than the speci\ufb01ed maximum sequence length for this model (758 > 512). Running this sequence through the model will result in indexing errors1\nprint(result[0]['summary_text'])1", "doc_id": "6ac6d2e7-0ba8-4ce8-860f-cfb6ee63d54d", "embedding": null, "doc_hash": "0e31191b20823d95b7047ad06b3eef0ea8a73e515c6dce8d2a1262a539f6bf16", "extra_info": {"page_label": "3", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 3615, "end": 4949}, "relationships": {"1": "b46c794a-060b-4b4e-8202-b26b3c2e447a", "2": "acbe384c-1f48-41ae-94ef-0e01a47ecf1c"}}, "__type__": "1"}, "5f876ebf-930e-47c1-abb3-82aa31e2cc47": {"__data__": {"text": "Streamlit \u662f\u2f00\u4e2a\u2f64\u4e8e\u6784\u5efa\u6570\u636e Web \u5e94\u2f64\u7a0b\u5e8f\u7684\u5e93\uff0c\u2f46\u9700\u4e86\u89e3\u4efb\u4f55\u524d\u7aef\u6280\u672f\uff08\u4f8b\u5982 HTML \u548c CSS\uff09\u3002\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb\u6b64\u5904\u67e5\u770b\u2f42\u6863\u3002\u521b\u5efa\u2f00\u4e2a\u540d\u4e3a TextSummarizer-webui.py \u7684 python \u2f42\u4ef6\uff1a\u2fb8\u5148\u521b\u5efa GUI \u7684\u4e3b\u2f32\uff0c\u7136\u540e\u5c06\u5143\u7d20\u4e0e\u903b\u8f91\u7ed3\u5408\u8d77\u6765\u3002\n\u5bfc\u2f0a streamlit \u540e\uff0c\u7b2c\u2f00\u6761\u8bed\u53e5\u5fc5\u987b\u662f set_page_con&g\uff08\u5982\u679c\u5c06\u5176\u653e\u5728\u7a0b\u5e8f\u4e2d\u7684\u5176\u4ed6\u4f4d\u7f6e\uff0c\u5219\u4f1a\u629b\u51fa\u9519\u8bef\uff09\uff1a\u53c2\u6570\u662f webapp \u2eda\u2faf\u7684\u603b\u4f53\u5e03\u5c40\u7684\u8bbe\u7f6e\u3002\u7136\u540e\u8bbe\u7f6e header image\uff1a\u4ec5\u2f64\u4e8e\u6d4b\u8bd5\uff0c\u5728\u8fd9\u2fa5\u4f7f\u2f64\u6765\u2f83\u2f79\u7edc\u7684\u56fe\u50cf https://placehold.co/750x150\u3002st.text_area\u662f\u53e6\u2f00\u4e2a Stramlit \u2f29\u90e8\u4ef6\uff1a\u5b83\u521b\u5efa\u2f00\u4e2a\u5e26\u6709\u6807\u9898\u548c\u5185\u5bb9\u7684\u2f42\u672c\u533a\u57df\u3002\u5728\u8fd9\u2fa5\u7684\u4f8b\u2f26\u4e2d\uff0c\u5185\u5bb9\u5c06\u7531\u5b57\u7b26\u4e32 your_future_text \u4e2d\u7684\u2f42\u672c\u586b\u5145\u3002\u6700\u540e\u2f00\u4e2a\u53c2\u6570\u662f key = 'result'\uff1a\u5c06\u2f64\u5b83\u6765\u8c03\u2f64 session_states \uff08\u5e94\u2f64\u7a0b\u5e8f\u8fd0\u2f8f\u65f6\u53ef\u4ee5\u8c03\u2f64\u548c\u66f4\u65b0\u53d8\u91cf\u7684\u2f45\u5f0f\uff09\n\u5bf9\u4e8e\u672c\u793a\u4f8b\uff0c\u4ec5\u5728\u6b64\u5b9a\u4e49 2 \u5217\uff0c\u5e76\u5728\u6bcf\u2f00\u5217\u4e2d\u653e\u7f6e\u2f00\u4e2a\u6309\u94ae\u3002\u5f53\u5728\u5bb9\u5668\uff08\u5217\uff09\u5185\u65f6\uff0c\u8c03\u2f64\u7684\u2f29\u90e8\u4ef6\u4e0d\u5e26 st.\u3002\u4f7f\u2f64 use_container_width=True \u5c06 Button \u7684\u5bbd\u5ea6\u6269\u5c55\u5230\u5217\u4e4b\u2f00\u3002\u4fdd\u5b58\u6240\u6709\u5185\u5bb9\uff0c\u5728\u7ec8\u7aef\u5e76\u8fd0\u2f8f Streamlit \u5e94\u2f64\u7a0b\u5e8f\u7c7b\u578b\uff1astreamlit run TextSummarizer-webui.py\u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c06\u5728\u9ed8\u8ba4\u5730\u5740 http://localhost:8501 \u6253\u5f00\u3002import streamlit as st############# Displaying images on the front end #################st.set_page_con\ufb01g(page_title=\"Mockup for single page webapp\",                   page_icon='\n!\n',                   layout=\"centered\",  #or wide                   initial_sidebar_state=\"expanded\",         ", "doc_id": "5f876ebf-930e-47c1-abb3-82aa31e2cc47", "embedding": null, "doc_hash": "f022305904e82a5d31972b9210777129552af23552cde8d72c2221b608090638", "extra_info": {"page_label": "4", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 948}, "relationships": {"1": "debbc6dd-b21e-4cb2-8092-389223fb701b", "3": "b8f9ec84-72e1-4482-9cb2-e25ae303ed3d"}}, "__type__": "1"}, "b8f9ec84-72e1-4482-9cb2-e25ae303ed3d": {"__data__": {"text": "run TextSummarizer-webui.py\u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c06\u5728\u9ed8\u8ba4\u5730\u5740 http://localhost:8501 \u6253\u5f00\u3002import streamlit as st############# Displaying images on the front end #################st.set_page_con\ufb01g(page_title=\"Mockup for single page webapp\",                   page_icon='\n!\n',                   layout=\"centered\",  #or wide                   initial_sidebar_state=\"expanded\",                   menu_items={                        'Get Help': 'https://docs.streamlit.io/library/api-reference',                        'Report a bug': \"https://www.extremelycoolapp.com/bug\",                        'About': \"# This is a header. This is an *extremely* cool app!\"}                        )# Load image placeholder from the webst.image('./images/header.png', width=750)# Set a Descriptive Titlest.title(\"My AI Summarizer\")st.divider()your_future_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras rhoncus massa sit amet est congue dapibus. Duis dictum ac nulla sit amet sollicitudin. In non metus ac neque vehicula egestas. Vestibulum quis justo id enim vestibulum venenatis. Cras gravida ex vitae dignissim suscipit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Duis ef\ufb01citur, lorem ut fringilla commodo, lacus orci lobortis turpis, sit amet consequat ante diam ut libero.\"st.text_area('Summarized text', your_future_text,               height = 150, key = 'result')12345678910111213141516171819\n# Set 2 colums to make the Buttons widercol1, col2 = st.columns(2)btn1 = col1.button(\" :star: Click ME \", use_container_width=True, type=\"secondary\")btn2 = col2.button(\" :smile: Click ME \", use_container_width=True, type=\"primary\")if btn1:    st.warning('You pressed the wrong one!', icon=\"\n\u26a0\n\")if btn2:    st.success('Good Choice!', icon=\"\n\u26a0\n\")  st.divider()12345678910", "doc_id": "b8f9ec84-72e1-4482-9cb2-e25ae303ed3d", "embedding": null, "doc_hash": "7b926ab28bbfac24f797bb46f1a8f0a9d1cf34f440bf548c95564e11af6e3ce0", "extra_info": {"page_label": "4", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 592, "end": 2393}, "relationships": {"1": "debbc6dd-b21e-4cb2-8092-389223fb701b", "2": "5f876ebf-930e-47c1-abb3-82aa31e2cc47"}}, "__type__": "1"}, "e2947b4a-a161-4dc8-af36-00163b22f9ba": {"__data__": {"text": "5.\u5c06\u903b\u8f91\u548c\u754c\u9762\u8054\u8c03\u8d77\u67655.\u5c06\u903b\u8f91\u548c\u754c\u9762\u8054\u8c03\u8d77\u6765  \u7b80\u5355\u4ecb\u7ecd\u5b8c Streamlit \u4e4b\u540e\uff0c\u518d\u6765\u8bf4\u903b\u8f91\u90e8\u5206\uff08AI pipeline\uff09\u548c\u56fe\u5f62\u2f64\u6237\u754c\u2faf\u90e8\u5206\uff08Streamlit\uff09\u3002\u4e0d\u2f64\u62c5\u2f3c\u4ee3\u7801\uff1a\u53ef\u4ee5\u5728 GitHub \u5b58\u50a8\u5e93\u4e2d\u627e\u5230\u5b83\u3002\u91cd\u547d\u540d\u4e4b\u524d\u7684\u2f42\u4ef6 main.py \u5e76\u521b\u5efa\u2f00\u4e2a\u65b0\u2f42\u4ef6 AI-TextSummarizer.py\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a########### GUI IMPORTS ################import streamlit as stimport ssl############# Displaying images on the front end #################st.set_page_con\ufb01g(page_title=\"Summarize and Talk ot your Text\",                   page_icon='\n#\n',                   layout=\"centered\",  #or wide                   initial_sidebar_state=\"expanded\",                   menu_items={                        'Get Help': 'https://docs.streamlit.io/library/api-reference',                        'Report a bug': \"https://www.extremelycoolapp.com/bug\",                        'About': \"# This is a header. This is an AI text summarizer!\"                                },                   )########### SSL FOR PROXY ##############ssl._create_default_https_context = ssl._create_unveri\ufb01ed_context#### IMPORTS FOR AI PIPELINES ###############from transformers import AutoTokenizer, AutoModelForSeq2SeqLMfrom transformers import pipelinefrom transformers import AutoModel, T5Tokenizer, T5Modelfrom transformers import T5ForConditionalGenerationfrom langchain.llms import HuggingFacePipelineimport torchimport datetime#############################################################################12345678910111213141516171819202122232425262728", "doc_id": "e2947b4a-a161-4dc8-af36-00163b22f9ba", "embedding": null, "doc_hash": "4a3db0ec58dfc4e6e16db329b29448d29b4fc2fe0e0dee58c7a7bd0e82631992", "extra_info": {"page_label": "5", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 1382}, "relationships": {"1": "a1f8f6e3-ef7b-4407-984b-71787bb10b11"}}, "__type__": "1"}, "70a3470c-ac1c-4047-b88d-5c8d01ca10af": {"__data__": {"text": "\u5230\u2f6c\u524d\u4e3a\u2f4c\u6ca1\u6709\u4ec0\u4e48\u65b0\u7684\u3002\u5c06\u5728\u4ee5\u4e0b\u4ee3\u7801\u5757\u4e2d\u5c06\u51fd\u6570\u548c\u4ea4\u4e92\u5f0f Streamlit widt \u653e\u5728\u2f00\u8d77\uff0c\u5e76\u89e3\u91ca\u6784\u5efa\u5757\u3002\n\u8fd9\u662f\u4e3b\u8981\u7684\u529f\u80fd\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u2f00\u4e2a\u51fd\u6570\uff0c\u56e0\u4e3a\u5355\u51fb\u6b63\u786e\u7684\u6309\u94ae\u65f6\u5c06\u5f00\u59cb\u6c47\u603b\uff08\u5bf9\u4e8e\u6b64\u2f45\u6cd5\uff0c\u9700\u8981\u2f00\u4e2a\u51fd\u6570\u6765\u8c03\u2f64\uff09#               SIMPLE TEXT2TEXT GENERATION INFERENCE#           checkpoint = \"./models/LaMini-Flan-T5-783M.bin\" # ###########################################################################checkpoint = \"./model/\"  # \u5b9e\u9645\u4e0a\u662f LaMini-Flan-T5-248M29303132#######################################################################     SUMMARIZATION FROM TEXT STRING WITH HUGGINGFACE PIPELINE       #######################################################################def AI_SummaryPL(checkpoint, text, chunks, overlap):    \"\"\"    checkpoint is in the format of relative path    example:  checkpoint = \"/content/model/\"  #it is actually LaMini-Flan-T5-248M   #tested \ufb01ne    text it is either a long string or a input long string or a loaded document into string    chunks: integer, lenght of the chunks splitting    ovelap: integer, overlap for cor attention and focus retreival    RETURNS full_summary (str), delta(str) and reduction(str)    post_summary14 = AI_SummaryPL(LaMini,doc2,3700,500)    USAGE EXAMPLE:    post_summary, post_time, post_percentage = AI_SummaryPL(LaMini,originalText,3700,500)    \"\"\"    from langchain.text_splitter import RecursiveCharacterTextSplitter    text_splitter = RecursiveCharacterTextSplitter(        # \u8bbe\u7f6e\u2f00\u4e2a\u2fae\u5e38\u2f29\u7684\u5757\u2f24\u2f29\uff0c\u53ea\u662f\u4e3a\u4e86\u663e\u2f70        chunk_size = chunks,        chunk_overlap  = overlap,        length_function = len,    )    texts = text_splitter.split_text(text)    checkpoint = checkpoint    tokenizer = T5Tokenizer.from_pretrained(checkpoint)    base_model = T5ForConditionalGeneration.from_pretrained(checkpoint,                                                        device_map='auto',                                                        torch_dtype=torch.\ufb02oat32)    ### INITIALIZING PIPELINE    pipe_sum = pipeline('summarization',                         model = base_model,                        tokenizer = tokenizer,   ", "doc_id": "70a3470c-ac1c-4047-b88d-5c8d01ca10af", "embedding": null, "doc_hash": "32b85c7c74f6a819126bf96a8321aa7b82dabbde096ec06e45aa4331f4a30540", "extra_info": {"page_label": "6", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 1962}, "relationships": {"1": "08c325b0-7cfa-4dbf-aba7-85ef0f567019", "3": "4c29d398-59a0-4a5f-aaa7-9e34e38eaccb"}}, "__type__": "1"}, "4c29d398-59a0-4a5f-aaa7-9e34e38eaccb": {"__data__": {"text": "                                  device_map='auto',                                                        torch_dtype=torch.\ufb02oat32)    ### INITIALIZING PIPELINE    pipe_sum = pipeline('summarization',                         model = base_model,                        tokenizer = tokenizer,                        max_length = 350,                         min_length = 25                        )    ## START TIMER    start = datetime.datetime.now()      ## START CHUNKING    full_summary = ''    for cnk in range(len(texts)):      result = pipe_sum(texts[cnk])      full_summary = full_summary + ' '+ result[0]['summary_text']    stop = datetime.datetime.now()      ## TIMER STOPPED AND RETURN DURATION    delta = stop-start      ### Calculating Summarization PERCENTAGE    reduction = '{:.1%}'.format(len(full_summary)/len(text))    print(f\"Completed in {delta}\")    print(f\"Reduction percentage: \", reduction)        return full_summary, delta, reduction1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from langchain.text_splitter import RecursiveCharacterTextSplittertext_splitter = RecursiveCharacterTextSplitter(    # \u8bbe\u7f6e\u2f00\u4e2a\u2fae\u5e38\u2f29\u7684\u5757\u2f24\u2f29\uff0c\u53ea\u662f\u4e3a\u4e86\u663e\u2f70    chunk_size = chunks,    chunk_overlap  = overlap,    length_function = len,)1234567", "doc_id": "4c29d398-59a0-4a5f-aaa7-9e34e38eaccb", "embedding": null, "doc_hash": "2f00a3fb7f6c2951865568e97a327e84e9686591fe5156efdf2692af5fad4d5f", "extra_info": {"page_label": "6", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 1667, "end": 2947}, "relationships": {"1": "08c325b0-7cfa-4dbf-aba7-85ef0f567019", "2": "70a3470c-ac1c-4047-b88d-5c8d01ca10af"}}, "__type__": "1"}, "fec868ed-828c-44ab-911a-bea286722711": {"__data__": {"text": "LangChain \u5e93\u662f\u2f00\u4e2a\u2fae\u5e38\u5f3a\u2f24\u7684\u2f2f\u5177\u7bb1\uff1a\u53ef\u4ee5\u4f7f\u2f64\u5916\u90e8\u2f42\u6863\u548c\u6765\u6e90\u4e0e\u8bed\u2f94\u6a21\u578b\u8fdb\u2f8f\u4ea4\u4e92\u3002LangChain TextSplitters \u7684\u2f45\u6cd5\u4e0d\u2f4c\u2f00\u79cd\u3002RecursiveCharacterSplitter \u662f\u63a8\u8350\u7684\u2f00\u79cd\uff0c\u2f64\u4e8e\u5c06\u2ed3\u901a\u2f64\u2f42\u672c\u5206\u5272\u6210\u2f29\u5757\uff08\u79f0\u4e3a\u5757\uff09\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 token \u9650\u5236\u3002\n\u5757\u5b58\u50a8\u5728\u5217\u8868\u4e2d\uff1a\u8fed\u4ee3\u5217\u8868\u4e2d\u7684\u9879\u2f6c\u5e76\u5c06\u6bcf\u4e2a\u5757\u63d0\u4f9b\u7ed9\u6458\u8981\u7ba1\u9053\u3002\u7136\u540e\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u8fde\u63a5\u5728\u2f00\u8d77\u4ee5\u83b7\u5f97 \ufb01nal_summary\u3002\n\u53ef\u4ee5\u770b\u5230\u2f00\u4e9b st.empty()\u3002\u8fd9\u662f\u2f00\u4e2a\u5360\u4f4d\u7b26\uff1a\u6b63\u5728\u2eda\u2faf\u5e03\u5c40\u4e2d\u9884\u8ba2\u2f00\u4e2a\u4f4d\u7f6e\uff0c\u7a0d\u540e\u5c06\u586b\u5145\u8be5\u4f4d\u7f6e\u3002\n\u5f53\u6309\u4e0b btt = st.button(\"1. Start Summarization\") \u65f6\u5c06\u8c03\u2f64\u6b64\u51fd\u6570\uff0c\u5f00\u59cb\u5bf9\u7c98\u8d34\u5728 text_area \u4e2d\u7684\u2f42\u672c\u8fdb\u2f8f\u6458\u8981\u3002\n\u8bf7\u6ce8\u610f\uff0cstart_sum \u7684\u552f\u2f00\u53c2\u6570\u662f session_state\u3002Session State \u662f\u2f00\u79cd\u5728\u6bcf\u4e2a\u2f64\u6237\u4f1a\u8bdd\u7684\u91cd\u65b0\u8fd0\u2f8f\u4e4b\u95f4\u5171\u4eab\u53d8\u91cf\u7684\u2f45\u6cd5\u3002\u9664\u4e86\u5b58\u50a8\u548c\u6301\u4e45\u72b6\u6001\u7684\u80fd\u2f12\u4e4b\u5916\uff0cStreamlit \u8fd8\u516c\u5f00\u4e86\u4f7f\u2f64\u56de\u8c03\u64cd\u4f5c\u72b6\u6001\u7684\u80fd\u2f12\u3002\u4f1a\u8bdd\u72b6\u6001\u4e5f\u4f1a\u5728\u591a\u2eda\u2faf\u5e94\u2f64\u7a0b\u5e8f\u5185\u7684\u5e94\u2f64\u7a0b\u5e8f\u4e4b\u95f4\u6301\u7eed\u5b58\u5728\u3002\u5728 venv \u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u65f6\uff0c\u4ece\u7ec8\u7aef\u8fd0\u2f8f\uff1atexts = text_splitter.split_text(text)8## \u5f00\u59cb\u7ec4\u5757full_summary = ''for cnk in range(len(texts)):   result = pipe_sum(texts[cnk])   full_summary = full_summary + ' '+ result[0]['summary_text']12345### HEADER sectionst.image('./images/header.png', width=750)st.title(\"My AI Summarizer\")st.divider()title = st.text_area('Insert here your Copy/Paste text', \"\", height = 350, key = 'copypaste')btt = st.button(\"1. Start Summarization\")txt = st.empty()timedelta = st.empty()text_lenght = st.empty()redux_bar = st.empty()st.divider()down_title = st.empty()down_btn = st.button('2. Download Summarization') text_summary = ''1234567891011121314def start_sum(text):    if st.session_state.copypaste == \"\":       ", "doc_id": "fec868ed-828c-44ab-911a-bea286722711", "embedding": null, "doc_hash": "df4f16ffb31123e04cff51705af7b6c84cc6b77b94df2a9a1c67c3267da6bb52", "extra_info": {"page_label": "7", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 1197}, "relationships": {"1": "29c9267d-b2c0-44dc-9404-6536736fa121", "3": "1be44838-93df-4184-844d-6c6b3670140a"}}, "__type__": "1"}, "1be44838-93df-4184-844d-6c6b3670140a": {"__data__": {"text": "+ ' '+ result[0]['summary_text']12345### HEADER sectionst.image('./images/header.png', width=750)st.title(\"My AI Summarizer\")st.divider()title = st.text_area('Insert here your Copy/Paste text', \"\", height = 350, key = 'copypaste')btt = st.button(\"1. Start Summarization\")txt = st.empty()timedelta = st.empty()text_lenght = st.empty()redux_bar = st.empty()st.divider()down_title = st.empty()down_btn = st.button('2. Download Summarization') text_summary = ''1234567891011121314def start_sum(text):    if st.session_state.copypaste == \"\":        st.warning('You need to paste some text...', icon=\"\n\u26a0\n\")    else:        with st.spinner('Initializing pipelines...'):            st.success(' AI process started', icon=\"\n$\n\")            print(\"Starting AI pipelines\")            text_summary, duration, reduction = AI_SummaryPL(LaMini,text,3700,500)        txt.text_area('Summarized text', text_summary, height = 350, key='\ufb01nal')        timedelta.write(f'Completed in {duration}')        text_lenght.markdown(f\"Initial length = {len(text.split(' '))} words / summarization = **{len(text_summary.split(' '))} words**\")        redux_bar.progress(len(text_summary)/len(text), f'Reduction: **{reduction}**')        down_title.markdown(f\"## Download your text Summarization\")12345678910111213if btt:    start_sum(st.session_state.copypaste)if down_btn:    def save\ufb01le(generated_summary, \ufb01lename):        st.write(\"Download in progress...\")        with open(\ufb01lename, 'w') as t:            t.write(generated_summary)        t.close()        st.success(f'AI Summarization saved in {\ufb01lename}', icon=\"\n\u2705\n\")    save\ufb01le(st.session_state.\ufb01nal, 'text_summarization.txt')    txt.text_area('Summarized text', st.session_state.\ufb01nal, height = 350)123456789101112\nstreamlit run AI-TextSummarizer.py1", "doc_id": "1be44838-93df-4184-844d-6c6b3670140a", "embedding": null, "doc_hash": "65cdb08025323f20538d56f6421eb81c51ffc45c28b1d673291862aa879671d4", "extra_info": {"page_label": "7", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 654, "end": 2428}, "relationships": {"1": "29c9267d-b2c0-44dc-9404-6536736fa121", "2": "fec868ed-828c-44ab-911a-bea286722711"}}, "__type__": "1"}, "3af1ab71-816a-47d3-b2b8-98d46d1c6d49": {"__data__": {"text": "\u7c98\u8d34\u60f3\u8981\u603b\u7ed3\u7684\u2f42\u7ae0\u2f42\u672c\uff0c\u7136\u540e\u6309\u6309\u94ae\u3002\n\u4e0b\u2faf\u5c1d\u8bd5\u589e\u52a0\u2f00\u4e9b\u2f83\u5b9a\u4e49\u6837\u5f0f\uff1acustom_style = \"\"\"    <style>        .stButton>button {            border-radius:0px;            padding:5px 20px;        }        .stTextArea textarea {            border-radius:0px;            padding:5px;            line-height:1.6        }        .stTextArea .st-br{            border-radius:0px;        }        .stTextArea>label p{            line-height:2        }        .block-container{            max-width:780px        }    </style>\"\"\"12345678910111213141516171819202122", "doc_id": "3af1ab71-816a-47d3-b2b8-98d46d1c6d49", "embedding": null, "doc_hash": "e5ef46440d571fa2867ae3004ce2cb8e14dbbb38c726c57c8564c58a2fcfc9d8", "extra_info": {"page_label": "8", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 515}, "relationships": {"1": "4b1fd3e2-ec27-4967-8392-fb1f955e6e11"}}, "__type__": "1"}, "41aee16f-f379-4c6d-971a-7413cc233535": {"__data__": {"text": "\u6548\u679c\u5982\u4e0b\uff1a\n\u603b\u7ed3\u603b\u7ed3  \u7ba1\u9053 Pipelines \u662f\u60ca\u2f08\u7684\u3002\u5373\u4f7f\u786c\u4ef6\u5f88\u5c11\uff0c\u4e5f\u53ef\u4ee5\u5728\u8ba1\u7b97\u673a\u4e0a\u8fd0\u2f8f\u6211\u4eec\u60f3\u8981\u7684\u6240\u6709\u5185\u5bb9\uff08LaMini-LM \u4e5f\u4ec5\u4f7f\u2f64 CPU \u8fd0\u2f8f\uff09\u3002\u5c1d\u8bd5\u4e0d\u540c\u7684\u8bbe\u7f6e\u4ee5\u63d0\u2fbc\u6458\u8981\u7684\u8d28\u91cf\u3002st.markdown(custom_style, unsafe_allow_html=True)2324", "doc_id": "41aee16f-f379-4c6d-971a-7413cc233535", "embedding": null, "doc_hash": "d018a0193b875f8915760e9ec98cbf721ec399a2bb8cc7642eea92c949a79cdc", "extra_info": {"page_label": "9", "file_name": "\u638c\u63e1AI\u6458\u8981\u6280\u672f\u6784\u5efa\u5b66\u4e60\u52a9\u7406.pdf"}, "node_info": {"start": 0, "end": 149}, "relationships": {"1": "510fb893-4caa-45d0-b4a5-4495682f0d39"}}, "__type__": "1"}, "acd70df1-e0da-49c5-8fab-e8b8825886f9": {"__data__": {"text": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba  arXiv \u662f\u2f00\u4e2a\u6536\u96c6\u7269\u7406\u5b66\u3001\u6570\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u2f63\u7269\u5b66\u4e0e\u6570\u7406\u7ecf\u6d4e\u5b66\u7684\u8bba\u2f42\u9884\u5370\u672c\u7684\u2f79\u7ad9\uff0c\u6210\u2f74\u4e8e1991\u5e748\u2f4914\u2f47\u3002\u622a\u2f842008\u5e7410\u2f49\uff0carXiv \u5df2\u6536\u96c6\u8d85\u8fc750\u4e07\u7bc7\u9884\u5370\u672c\uff1b\u2f842014\u5e74\u5e95\uff0c\u85cf\u91cf\u8fbe\u52301\u767e\u4e07\u7bc7\u3002\u622a\u2f842016\u5e7410\u2f49\uff0c\u6bcf\u2f49\u63d0\u4ea4\u91cf\u8d85\u8fc710,000\u7bc7\u3002arXiv \u2f79\u7ad9\u7684\u7814\u7a76\u8bba\u2f42\u6bcf\u5929\u90fd\u5728\u66f4\u65b0\uff0c\u8ddf\u4e0a arXiv \u6700\u65b0\u79d1\u5b66\u6210\u5c31\u7684\u8282\u594f\u5c31\u6210\u4e86\u2f00\u4ef6\u5177\u6709\u6311\u6218\u7684\u4e8b\u60c5\u3002\u2f63\u5728\u8fd9\u4e2a\u5e74\u4ee3\u7684\u6211\u4eec\u662f\u5e78\u8fd0\u7684\uff0c\u8ddf\u4e0a AI \u7684\u6f6e\u6d41\uff0c\u901a\u8fc7\u4f7f\u2f64\u2f24\u578b\u8bed\u2f94\u6a21\u578b\u53ca\u5176\u2f40\u6301\u5e94\u2f64\u7a0b\u5e8f\u6846\u67b6\uff08\u5982 Langchain\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u2f83\u52a8\u8ddf\u8e2a arXiv \u8bba\u2f42\u7684\u65b0\u7248\u672c\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u8bbe\u8ba1\u2f00\u4e2a Twitter \u673a\u5668\u2f08\uff0c\u53d1\u5e03\u65b0\u8bba\u2f42\u6458\u8981\u7684\u63a8\u2f42\uff0c\u8ba9\u7814\u7a76\u2f08\u5458\u548c\u2f08\u2f2f\u667a\u80fd\u7231\u597d\u8005\u5feb\u901f\u4e86\u89e3\u6700\u6709\u8da3\u7684\u79d1\u5b66\u6210\u5c31\u6216\u53d1\u73b0\u30021\u3001\u603b\u4f53\u8bbe\u8ba11\u3001\u603b\u4f53\u8bbe\u8ba1  \u5148\u611f\u53d7\u2f00\u4e0b\u673a\u5668\u2f08\u53d1\u9001\u7684\u6f14\u793a\u63a8\u2f42\uff1a\nTwitter \u673a\u5668\u2f08\u5728\u529f\u80fd\u4e0a\u79f0\u4e3a arXiv \u8bba\u2f42\u6458\u8981\u5668\uff0c\u7531\u2f0f\u4e2a\u2f46\u7f1d\u534f\u4f5c\u7684\u5173\u952e\u7ec4\u4ef6\u7ec4\u6210\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u5305\u62ec\u2f64\u4e8e\u68c0\u7d22\u65b0\u8bba\u2f42\u53d1\u5e03\u7684 arXiv API\u3001\u2f64\u4e8e\u6458\u8981\u7684 LLMChain \u4ee5\u53ca\u5e26\u6709\u2f83\u5b9a\u4e49\u63a8\u2f42\u2f2f\u5177\u7684 Langchain", "doc_id": "acd70df1-e0da-49c5-8fab-e8b8825886f9", "embedding": null, "doc_hash": "ccba786e87ca4de68003ee36868ace742fed3d04b80decda8f27b080b2e7e7ec", "extra_info": {"page_label": "1", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 0, "end": 565}, "relationships": {"1": "7991226c-7519-4d6a-8ce3-ce0cd3ad090b", "3": "5c75de89-2835-43b9-a907-7cd2242a33cd"}}, "__type__": "1"}, "5c75de89-2835-43b9-a907-7cd2242a33cd": {"__data__": {"text": "\u673a\u5668\u2f08\u5728\u529f\u80fd\u4e0a\u79f0\u4e3a arXiv \u8bba\u2f42\u6458\u8981\u5668\uff0c\u7531\u2f0f\u4e2a\u2f46\u7f1d\u534f\u4f5c\u7684\u5173\u952e\u7ec4\u4ef6\u7ec4\u6210\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u5305\u62ec\u2f64\u4e8e\u68c0\u7d22\u65b0\u8bba\u2f42\u53d1\u5e03\u7684 arXiv API\u3001\u2f64\u4e8e\u6458\u8981\u7684 LLMChain \u4ee5\u53ca\u5e26\u6709\u2f83\u5b9a\u4e49\u63a8\u2f42\u2f2f\u5177\u7684 Langchain \u4ee3\u7406\uff0c\u2f64\u4e8e\u6267\u2f8f\u6574\u4e2a\u53d1\u5e03\u8fc7\u7a0b\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u8be5\u673a\u5668\u2f08\u5185\u7684\u4fe1\u606f\u6d41\u548c\u64cd\u4f5c\uff0c\u4e0b\u2faf\u662f\u6574\u4f53\u7684\u67b6\u6784\u56fe\uff1a\n\u5728\u6b64\u6f14\u793a\u5e94\u2f64\u7a0b\u5e8f\u4e2d\uff0c\u5c06\u8bed\u2f94\u6a21\u578b\u5728\u4e0d\u540c\u6b65\u9aa4\u4e2d\u8fd0\u2f8f\u4e24\u6b21\u3002\u7b2c\u2f00\u6b21\u8fd0\u2f8f\u662f\u4f7f\u2f64\u666e\u901a\u94fe\u6839\u636e\u8bba\u2f42\u6458\u8981\u2f63\u6210\u6458\u8981\uff0c\u7b2c\u2f06\u6b21\u8fd0\u2f8f\u662f\u8981\u6c42\u4ee3\u7406\u6267\u2f8f\u63a8\u2f42\u5e16\u2f26\u3002\u663e\u7136\uff0c\u7b2c\u2f06\u6b21\u8fd0\u2f8f\u53ef\u4ee5\u2f64\u6ca1\u6709\u4efb\u4f55 AI \u53c2\u4e0e\u7684\u7eaf\u7a0b\u5e8f\u4ee3\u7801\u4ee3\u66ff\uff0c\u4f46\u662f\uff0c\u4e3a\u4e86\u6f14\u793a\u5982\u4f55\u6700\u597d\u5730\u5229\u2f64\u2f63\u6210\u5f0f AI \u6765\u5b8c\u6210\u672a\u6765\u66f4\u590d\u6742\u7684\u4efb\u52a1\uff0c\u503c\u5f97\u5c06\u6b64\u4efb\u52a1\u5305\u88c5\u5230 Langchain \u4ee3\u7406\u4e2d\u30022\u3001\u4ee3\u7801\u6a21\u57572\u3001\u4ee3\u7801\u6a21\u5757  ", "doc_id": "5c75de89-2835-43b9-a907-7cd2242a33cd", "embedding": null, "doc_hash": "ef6763cc115fa1833d57f6b39805978e89b0eef0dda3a89a50472d10a8b5f47e", "extra_info": {"page_label": "1", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 464, "end": 777}, "relationships": {"1": "7991226c-7519-4d6a-8ce3-ce0cd3ad090b", "2": "acd70df1-e0da-49c5-8fab-e8b8825886f9"}}, "__type__": "1"}, "c06cabfb-7db7-4e92-a5c8-727687a4fc4c": {"__data__": {"text": "\u73b0\u5728\uff0c\u5c31\u6765\u9010\u6b65\u63a2\u7d22\u4f7f\u8fd9\u4e2a\u63a8\u2f42\u673a\u5668\u2f08\u7684\u4ee3\u7801\u2f2f\u4f5c\u6d41\u7a0b\u3002\u5c06\u6df1\u2f0a\u7814\u7a76\u6bcf\u4e2a\u6b65\u9aa4\uff0c\u63d0\u4f9b\u4ee3\u7801\u2f5a\u6bb5\u548c\u89e3\u91ca\uff0c\u4ee5\u786e\u4fdd\u987a\u5229\u5b9e\u65bd\u3002arXiv APIarXiv API  arXiv \u662f\u5eb7\u5948\u5c14\u2f24\u5b66\u56fe\u4e66\u9986\u7684\u2f00\u4e2a\u6d41\u2f8f\u7684\u5728\u7ebf\u5b58\u50a8\u5e93\uff0c\u5b58\u50a8\u7269\u7406\u3001\u6570\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u7b49\u5404\u4e2a\u9886\u57df\u7684\u79d1\u5b66\u8bba\u2f42\u3002\u5b83\u4e3a\u7814\u7a76\u2f08\u5458\u5728\u6b63\u5f0f\u540c\u2f8f\u8bc4\u5ba1\u548c\u5728\u4f20\u7edf\u79d1\u5b66\u671f\u520a\u4e0a\u53d1\u8868\u4e4b\u524d\u5206\u4eab\u4ed6\u4eec\u7684\u2f2f\u4f5c\u63d0\u4f9b\u4e86\u2f00\u4e2a\u5e73\u53f0\u3002arXiv \u4e0a\u6258\u7ba1\u7684\u8bba\u2f42\u53ef\u4ee5\u514d\u8d39\u5411\u516c\u4f17\u5f00\u653e\uff0c\u8ba9\u7814\u7a76\u2f08\u5458\u548c\u6280\u672f\u7231\u597d\u8005\u80fd\u591f\u53ca\u65f6\u4e86\u89e3\u6700\u65b0\u7684\u7814\u7a76\u8fdb\u5c55\u3002arXiv \u8fd8\u63d0\u4f9b\u5bf9\u5176\u8d44\u6e90\u7684 API \u8bbf\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7 Python \u8c03\u2f64API\u5b9a\u671f\u4e0b\u8f7d\u6240\u9700\u7684\u8bba\u2f42\u53ca\u5176\u5173\u952e\u6570\u636e\u3002\u5b89\u88c5\u8f6f\u4ef6\u5305\uff1a\u641c\u7d22\u5173\u4e8e language model \u7684\u6700\u65b0\u8bba\u2f42\u3002\n\u4ee3\u7801\u901a\u8fc7 API \u5728 arXiv \u6570\u636e\u5e93\u4e0a\u6267\u2f8f search() \u68c0\u7d22\u4e0e\u67e5\u8be2\u5339\u914d\u5173\u4e8e language model \u7684\u6700\u65b0\u8bba\u2f42\uff0c\u7ed3\u679c\u6309\u63d0\u4ea4\u2f47\u671f\u6392\u5e8f\u3002\u7136\u540e\u8fed\u4ee3\u641c\u7d22\u7ed3\u679c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u679c\uff0c\u5b83\u5c06\u8bba\u2f42\u7684\u6807\u9898\u3001\u6458\u8981\u548c URL \u9644\u52a0\u5230\u5c06\u2f64\u4e8e\u540e\u7eed\u2f42\u672c\u6458\u8981\u6b65\u9aa4\u7684 summary \u5b57\u7b26\u4e32\u3002\u6709\u5173 arXiv API \u7684\u66f4\u8be6\u7ec6\u2f64\u6cd5\uff0c\u53ef\u4ee5\u5728\u8fd9\u2fa5\u627e\u5230\u5b83\u4eec\u3002\u4f7f\u7528 LLMChain \u8fdb\u884c\u6458\u8981\u4f7f\u7528 LLMChain \u8fdb\u884c\u6458\u8981  \u73b0\u5728\uff0c\u5c06\u5b9e\u73b0\u2f00\u4e2a\u7b80\u5355\u7684 LLM \u94fe\u6765\u2f83\u52a8\u5904\u7406\u52a8\u6001\u63d0\u793a\uff0c\u8981\u6c42 gpt-3.5-turbo \u6a21\u578b\u5728 arXiv \u62bd\u8c61\u4e0a\u4e0b\u2f42\u4e0a\u2f63\u6210\u6458\u8981\u3002\u5b89\u88c5\u8f6f\u4ef6\u5305\uff1a\u5c06 OpenAI API", "doc_id": "c06cabfb-7db7-4e92-a5c8-727687a4fc4c", "embedding": null, "doc_hash": "a4eea3da28545e827eb7b643986e4e10b86206453b11f17890b43d95343f6f55", "extra_info": {"page_label": "2", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 0, "end": 581}, "relationships": {"1": "b7858407-a63f-47c4-9ab3-27dc8802118e", "3": "66923431-e101-4f89-8657-b40c4a86cd42"}}, "__type__": "1"}, "66923431-e101-4f89-8657-b40c4a86cd42": {"__data__": {"text": "arXiv API \u7684\u66f4\u8be6\u7ec6\u2f64\u6cd5\uff0c\u53ef\u4ee5\u5728\u8fd9\u2fa5\u627e\u5230\u5b83\u4eec\u3002\u4f7f\u7528 LLMChain \u8fdb\u884c\u6458\u8981\u4f7f\u7528 LLMChain \u8fdb\u884c\u6458\u8981  \u73b0\u5728\uff0c\u5c06\u5b9e\u73b0\u2f00\u4e2a\u7b80\u5355\u7684 LLM \u94fe\u6765\u2f83\u52a8\u5904\u7406\u52a8\u6001\u63d0\u793a\uff0c\u8981\u6c42 gpt-3.5-turbo \u6a21\u578b\u5728 arXiv \u62bd\u8c61\u4e0a\u4e0b\u2f42\u4e0a\u2f63\u6210\u6458\u8981\u3002\u5b89\u88c5\u8f6f\u4ef6\u5305\uff1a\u5c06 OpenAI API \u5bc6\u94a5\u8bbe\u7f6e\u4e3a\u73af\u5883\u3002\u521b\u5efa\u2f00\u4e2a\u597d\u7684\u63d0\u793a\u6a21\u677f\uff08\u59cb\u7ec8\u662f\u6700\u91cd\u8981\u7684\uff09\u3002\n\u4f7f\u2f64\u6a21\u578b gpt-3.5-turbo \u548c\u63d0\u793a\u6a21\u677f PROMPT_TWEET \u521b\u5efa LLMChain\u3002\n\u4ece arxiv_search() \u63d0\u4f9b\u6700\u65b0 arXiv \u8bba\u2f42\u7684\u6458\u8981\u5b57\u7b26\u4e32\u3002pip install arxiv1import arxivdef arxiv_search():    summary = ''    search = arxiv.Search(      query = \"language model\",      max_results = 1,      sort_by = arxiv.SortCriterion.SubmittedDate    )    for result in search.results():        summary = f\"Title: {result.title}, Abstract: {result.summary}, URL: {result.entry_id}\"    return summary123456789101112\npip install langchain openai1os.environ[\"OPENAI_API_KEY\"] = \"{Your_API_Key}\"1prompt_tweet_template = \"\"\"You are a AI technology blogger who write regular tweets for shortly summarizing new papers on Arxiv about languagemodel topics. You write summary for tweets based on text with content of Title, Abstract, URL: ##start {text} ##endYour write a 50-word quick summary including key information from the Title and Abstract, then, attach the URL after summary.Summary: \"\"\"123456from langchain import PromptTemplate, LLMChainfrom langchain.chat_models import ChatOpenAIPROMPT_TWEET = PromptTemplate(template=prompt_tweet_template, input_variables=[\"text\"])llm = ChatOpenAI(temperature=0.5)tweet_chain = LLMChain(llm=llm, prompt=PROMPT_TWEET,verbose=True)123456", "doc_id": "66923431-e101-4f89-8657-b40c4a86cd42", "embedding": null, "doc_hash": "0cb1589e08cd1b7a27e02887b5267f4bdc095130db19cc66ca890970c7e8a8a0", "extra_info": {"page_label": "2", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 437, "end": 1818}, "relationships": {"1": "b7858407-a63f-47c4-9ab3-27dc8802118e", "2": "c06cabfb-7db7-4e92-a5c8-727687a4fc4c"}}, "__type__": "1"}, "73c7c230-0aea-4b55-8fe0-2accf630df4b": {"__data__": {"text": "\u73b0\u5728\u6709\u4e86\u2f00\u6761\u4e0d\u9519\u7684\u63a8\u2f42\uff0c\u5176\u4e2d\u5305\u542b arXiv \u8bba\u2f42\u6458\u8981 tweet_body \uff0c\u63a5\u4e0b\u6765\u5c31\u51c6\u5907\u53d1\u9001\u3002Twitter APITwitter API  \u8981\u83b7\u5f97 Twitter API \u7684\u8bb8\u53ef\uff0c\u5fc5\u987b\u767b\u5f55 Twitter \u5f00\u53d1\u8005\u5e73\u53f0\u521b\u5efa\u2f00\u4e2a\u9879\u2f6c\u53ca\u5176\u5e94\u2f64\u7a0b\u5e8f\uff0c\u4ee5\u2f45\u4fbf\u673a\u5668\u2f08\u7a0d\u540e\u8c03\u2f64\u5b83\u4eec\u7684 API\u3002\u5f00\u53d1\u8005\u5e73\u53f0\u7684 URL\uff1ahttps://developer.twitter.com/en/po!al/\u3002\n\u5982\u679c\u5f00\u53d1\u8005\u514d\u8d39\u8d26\u6237\uff0c\u5219\u53ea\u80fd\u521b\u5efa\u5305\u542b\u2f00\u4e2a\u5e94\u2f64\u7a0b\u5e8f\u7684\u9879\u2f6c\u3002\u91cd\u547d\u540d\u9879\u2f6c\u5e94\u2f64\u7a0b\u5e8f\u540e\uff0c\u627e\u5230\u94a5\u5319\u56fe\u6807\uff0c\u7136\u540e\u5355\u51fb\uff0c\u5c06\u91cd\u5b9a\u5411\u5230\u8be5\u5e94\u2f64\u7a0b\u5e8f\u7684Keys and tokens\u2eda\u2faf\u3002\n\u5355\u51fb Generate \u6216 Regenerate \u6309\u94ae\u2f63\u6210\u5bc6\u94a5\uff0c\u7136\u540e\u5c06 consumer_key \u548c consumer_secret \u590d\u5236\u5230\u5c06\u5728\u540e\u7eed\u6b65\u9aa4\u4e2d\u4f7f\u2f64\u7684\u5b89\u5168\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5bc6\u94a5\u548c secret \u6388\u6743\u83b7\u5f97\u5bf9 Twitter API \u7684\u5b8c\u5168\u8bbf\u95ee\u6743\u9650\u3002\u5b89\u88c5\u8f6f\u4ef6\u5305\u901a\u8fc7\u6388\u6743\u6765\u521d\u59cb\u5316 Twitter \u4f1a\u8bdd\u3002new_paper = arxiv_search()tweet_body = tweet_chain.run(new_paper)12\npip install requests requests_oauthlib1def tweet_init():    consumer_key = \"{Your_consumer_key}\"    consumer_secret = \"{Your_consumer_secret}\"    # Get request token    request_token_url = \"https://api.twitter.com/oauth/request_token?oauth_callback=oob&x_auth_access_type=write\"    oauth = OAuth1Session(consumer_key, client_secret=consumer_secret)    print(oauth)    try:        fetch_response = oauth.fetch_request_token(request_token_url)    except ValueError:1234567891011", "doc_id": "73c7c230-0aea-4b55-8fe0-2accf630df4b", "embedding": null, "doc_hash": "f4a1f7f7301b7a3e01340dc4a4e31598dda19831112e004ba57ed59779893227", "extra_info": {"page_label": "3", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 0, "end": 976}, "relationships": {"1": "e4aee8b8-de31-4b79-b57d-117be1914bf0"}}, "__type__": "1"}, "a3cd4ede-cd25-434d-bfaa-820eb3dde242": {"__data__": {"text": "\u6b64\u4ee3\u7801\u2f5a\u6bb5\u8bbe\u7f6e\u4f7f\u2f64 OAuth 1.0 \u8bbf\u95ee Twitter API \u7684\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u3002\u5b83\u6d89\u53ca\u83b7\u53d6\u6388\u6743\u6240\u9700\u4ee4\u724c\u7684\u2f0f\u4e2a\u6b65\u9aa4\u3002\u2fb8\u5148\u4f7f\u2f64 fetch_request_token() \u2f45\u6cd5\u4ece Twitter \u7684 API \u8bf7\u6c42\u4e34\u65f6\u8bf7\u6c42\u4ee4\u724c resources_owner token\u548csecret\u3002\u2f63\u6210\u2f00\u4e2a\u4e34\u65f6 URL\uff0c\u2f64\u4e8e\u63d0\u4f9b PIN \u7801\uff0c\u5e0c\u671b\u2f64\u6237\u5728\u7ec8\u7aef\u63d0\u793a\u4e2d\u8f93\u2f0a\u5982\u4e0b\u6240\u793a\u7684\u5185\u5bb9\uff1a\u8bf7\u524d\u5f80\u6b64\u5904\u6388\u6743\uff1ahttps://api.twitter.com/oauth/authorize?oauth_token=jvPdHgAAAAABofwiAAABiRDFU_M \u5c06 PIN \u7801\u7c98\u8d34\u5230\u6b64\u5904\uff1a{Input the PIN display on above link}\u4f7f\u2f64 PIN \u7801\u4f5c\u4e3a veri\ufb01er\uff0c\u4e0e\u5176\u4ed6\u4e24\u4e2a token/secret  \u5bf9\u2f00\u8d77\u8bf7\u6c42\u2f00\u5bf9\u8bbf\u95ee token/secret \u3002\u6700\u540e\uff0c\u4f7f\u2f64\u83b7\u5f97\u7684 access token \u548c secret \u91cd\u65b0\u914d\u7f6e OAuth1Session \u5b9e\u4f8b\u3002\u6b64\u91cd\u65b0\u914d\u7f6e\u5141\u8bb8\u4f7f\u2f64 Twitter \u5e10\u6237\u5bf9 Twitter API \u7684\u540e\u7eed\u8bf7\u6c42\u8fdb\u2f8f\u8eab\u4efd\u9a8c\u8bc1\u3002\u5728\u5e94\u2f64\u7a0b\u5e8f\u88ab\u6388\u4e88\u5bf9 API \u7684\u8bbf\u95ee\u6743\u9650\u540e\uff0c\u53ea\u9700\u7f16\u5199\u2f00\u4e2a\u51fd\u6570 tweet_send() \u5373\u53ef\u901a\u8fc7\u6388\u6743\u5b9e\u4f8b mytweet \u53d1\u5e03\u5305\u542b\u6709\u6548\u8d1f\u8f7d\u5185\u5bb9\u7684\u63a8\u2f42\u3002\nLangchain \u4ee3\u7406\u521b\u5efaLangchain \u4ee3\u7406\u521b\u5efa          print(            \"There may have been an issue with the consumer_key or consumer_secret you entered.\"        )    resource_owner_key = fetch_response.get(\"oauth_token\")    resource_owner_secret = fetch_response.get(\"oauth_token_secret\")    print(\"Got OAuth token: %s\" % resource_owner_key)    # Get authorization    base_authorization_url = \"https://api.twitter.com/oauth/authorize\"    authorization_url = oauth.authorization_url(base_authorization_url)    print(\"Please go here and authorize: %s\" % authorization_url)    veri\ufb01er = input(\"Paste the PIN here: \")    # Get the access token    access_token_url = \"https://api.twitter.com/oauth/access_token\"    oauth = OAuth1Session(        consumer_key,        client_secret=consumer_secret,        resource_owner_key=resource_owner_key,        resource_owner_secret=resource_owner_secret,        veri\ufb01er=veri\ufb01er,    )    oauth_tokens = oauth.fetch_access_token(access_token_url)", "doc_id": "a3cd4ede-cd25-434d-bfaa-820eb3dde242", "embedding": null, "doc_hash": "674a61fd94290908c57c2cb992543f77035944963c25478e9da756940a1c42be", "extra_info": {"page_label": "4", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 0, "end": 1526}, "relationships": {"1": "2379446f-19f8-4306-8aa3-4a6cddb02160", "3": "a661cf14-0c5e-4e1d-aea0-d7423117b64f"}}, "__type__": "1"}, "a661cf14-0c5e-4e1d-aea0-d7423117b64f": {"__data__": {"text": "   print(\"Please go here and authorize: %s\" % authorization_url)    veri\ufb01er = input(\"Paste the PIN here: \")    # Get the access token    access_token_url = \"https://api.twitter.com/oauth/access_token\"    oauth = OAuth1Session(        consumer_key,        client_secret=consumer_secret,        resource_owner_key=resource_owner_key,        resource_owner_secret=resource_owner_secret,        veri\ufb01er=veri\ufb01er,    )    oauth_tokens = oauth.fetch_access_token(access_token_url)    access_token = oauth_tokens[\"oauth_token\"]    access_token_secret = oauth_tokens[\"oauth_token_secret\"]    oauth = OAuth1Session(        consumer_key,        client_secret=consumer_secret,        resource_owner_key=access_token,        resource_owner_secret=access_token_secret,    )    return oauthmytweet = tweet_init()12131415161718192021222324252627282930313233343536373839404142434445464748\ndef tweet_send(payload):        payload_json = {\"text\": payload}    # Making the request    response = mytweet.post(        \"https://api.twitter.com/2/tweets\",        json=payload_json,    )    if response.status_code != 201:        raise Exception(            \"Request returned an error: {} {}\".format(response.status_code, response.text)        )    return  response.status_code123456789101112131415", "doc_id": "a661cf14-0c5e-4e1d-aea0-d7423117b64f", "embedding": null, "doc_hash": "007765707bfc4c9859170fd90799e6f4d453d97963b38f3ddc49898348d91b25", "extra_info": {"page_label": "4", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 1053, "end": 2326}, "relationships": {"1": "2379446f-19f8-4306-8aa3-4a6cddb02160", "2": "a3cd4ede-cd25-434d-bfaa-820eb3dde242"}}, "__type__": "1"}, "c19d18c2-3c7a-475f-8f20-deda427acb95": {"__data__": {"text": "\u6700\u540e\u2f00\u6b65\u662f\u521b\u5efa\u2f00\u4e2a\u8fd0\u2f8f ReAct \u6765\u53d1\u5e03\u63a8\u2f42\u7684 Langchain \u4ee3\u7406\u3002\u5bfc\u2f0a\u5fc5\u8981\u7684\u6a21\u5757\u3002\n\u521b\u5efa\u4ece BaseTool \u6d3e\u2f63\u7684\u540d\u4e3a TweetSendTool \u7684\u2f2f\u5177\u6765\u8c03\u2f64\u5916\u90e8\u51fd\u6570 tweet_send(payload)\u3002\n\u4ece\u5728\u524d\u2faf\u7684\u6b65\u9aa4\u4e2d\u521b\u5efa\u7684\u73b0\u6709\u2f2f\u5177\u548c llm \u521b\u5efa\u4ee3\u7406\u3002\n\u6784\u5efa\u2f00\u4e2a\u50cf\u6837\u7684\u63d0\u793a\u6a21\u677f\uff0c\u2f64\u4e8e\u4ece\u5907\u2f64 arXiv \u6458\u8981 tweet_body \u5230\u63a8\u2f42\u53d1\u5e03\u2f45\u6cd5\u7684\u8fde\u63a5\u3002\n\u8fd0\u2f8f\u4ee3\u7406\u3002\u6bcf\u6b21\u4ee3\u7406\u8fd0\u2f8f\u65f6\uff0cTwitter \u4e0a\u90fd\u4f1a\u53d1\u5e03\u2f00\u6761\u63a8\u2f42\uff0c\u5176\u4e2d\u603b\u7ed3\u4e86\u6700\u65b0 arXiv \u8bba\u2f42\u4e2d\u6709\u5173\u8bed\u2f94\u6a21\u578b\u4e3b\u9898\u7684\u5173\u952e\u4fe1\u606f\u3002\u4e0d\u2f9c\u7684\u662f\u6bcf\u6b21\u90fd\u9700\u8981\u6388\u6743 PIN\u7801\uff0c\u514d\u8d39\u7684 Twitter API \u6ca1\u529e\u6cd5\u5b9e\u73b0\u2f83\u52a8\u6267\u2f8f\u53d1\u5e03\u3002from langchain.agents import AgentType, initialize_agentfrom langchain.tools import BaseTool, StructuredTool, Tool, toolfrom pydantic import BaseModel, Fieldfrom typing import Optional, Typefrom langchain.callbacks.manager import (    AsyncCallbackManagerForToolRun,    CallbackManagerForToolRun,)123456789class TweetSendInput(BaseModel):    payload: str = Field(..., description=\"This is the content of tweet to be sent.\")class TweetSendTool(BaseTool):    name = \"Tweet Send\"    description = \"useful for when you need to send a tweet\"    def _run(        self, payload: str, run_manager: Optional[CallbackManagerForToolRun] = None    ) -> str:        \"\"\"Use the tool.\"\"\"        return tweet_send(payload)    async def _arun(        self, payload: str, run_manager: Optional[AsyncCallbackManagerForToolRun] = None    ) -> str:        \"\"\"Use the tool asynchronously.\"\"\"        raise NotImplementedError(\"Tweet send does not support async\")    args_schema: Type[BaseModel] = TweetSendInput1234567891011121314151617181920tools = [TweetSendTool()]agent = initialize_agent(    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)1234instructions = f\"\"\"    Post a tweet with the summary of Arxiv paper, use the common Twitter expression style, and with '#AI #arXiv', and provide URL at the end.    The summary: {tweet_body}\"\"\"1234agent.run(instructions)1", "doc_id": "c19d18c2-3c7a-475f-8f20-deda427acb95", "embedding": null, "doc_hash": "cdfab2301e21c4dff7ed0a6ef7237dd5eb067a9a841ff6c9bbe0956e3976ecab", "extra_info": {"page_label": "5", "file_name": "\u901a\u8fc7 OpenAI \u548c Langchain \u6784\u5efa Arxiv \u8bba\u6587\u6458\u8981 Twitter \u673a\u5668\u4eba.pdf"}, "node_info": {"start": 0, "end": 1663}, "relationships": {"1": "43389b16-9ba4-4453-8ef9-72072927c16e"}}, "__type__": "1"}}}